knitr::opts_chunk$set(echo = TRUE)
```{r}
# 7번 문제
```{r}
# 필요한 패키지를 로드합니다.
library(ggplot2)
# 이항분포의 파라미터를 설정합니다.
n <- 10
p <- 0.7
# 이항분포의 평균과 분산을 계산합니다.
mean_binom <- n * p
var_binom <- n * p * (1 - p)
# x 값의 범위를 설정합니다.
x <- 0:n
# 이항분포의 확률을 계산합니다.
binom_prob <- dbinom(x, size = n, prob = p)
# 정규분포의 확률을 계산합니다.
norm_prob <- dnorm(x, mean = mean_binom, sd = sqrt(var_binom))
# 데이터프레임을 생성합니다.
df <- data.frame(x, binom_prob, norm_prob)
# 그래프를 그립니다.
ggplot(df, aes(x = x)) +
geom_line(aes(y = binom_prob, color = "Binomial"), size = 1) +
geom_line(aes(y = norm_prob, color = "Normal"), size = 1) +
scale_color_manual(values = c("Binomial" = "blue", "Normal" = "red")) +
labs(
title = "Binomial and Normal Distributions",
x = "x",
y = "Probability",
color = "Distribution"
)
# 그래프를 그립니다.
ggplot(df, aes(x = x)) +
geom_line(aes(y = binom_prob, color = "Binomial"), size = 1) +
geom_line(aes(y = norm_prob, color = "Normal"), size = 1) +
scale_color_manual(values = c("Binomial" = "blue", "Normal" = "red")) +
labs(
title = "Binomial and Normal Distributions",
x = "x",
y = "Probability",
color = "Distribution"
)
## (2)B(100, 0.7)
```{r}
# 필요한 패키지를 로드합니다.
library(ggplot2)
# 연속변수의 x 값 범위를 설정합니다. 이 경우에는 -4에서 4까지로 설정했습니다.
x_cont <- seq(-4, 4, by = 0.01)
# 연속변수의 확률밀도함수를 계산합니다.
pdf_cont <- (1 / (2 * sqrt(2 * pi))) * exp(-0.5 * x_cont^2) * 0.5
# 이산변수의 x 값과 확률밀도함수를 설정합니다.
x_disc <- 0
pdf_disc <- 0.5
# 이산과 연속 데이터를 하나의 데이터프레임으로 합칩니다.
df_cont <- data.frame(x = x_cont, pdf = pdf_cont, type = "Continuous")
df_disc <- data.frame(x = x_disc, pdf = pdf_disc, type = "Discrete")
df <- rbind(df_cont, df_disc)
# 그래프를 그립니다.
ggplot(df, aes(x = x, y = pdf, color = type)) +
geom_line(data = df[df$type == "Continuous", ], size = 1) +
geom_point(data = df[df$type == "Discrete", ], size = 4) +
scale_color_manual(values = c("Continuous" = "blue", "Discrete" = "red")) +
labs(
title = "Probability Density Function of X",
x = "x",
y = "Probability Density",
color = "Type"
)
# 7번 문제
## (1)B(10, 0.7)
```{r}
# 데이터와 가능한 세타 값 설정
x <- c(1, 1, 0, 0, 1)
theta <- seq(0.1, 0.9 , by=0.1)
# 사전확률 설정
prior <- rep(1/length(theta), length(theta))
# 가능도 계산
likelihood <- dbinom(sum(x), length(x), theta)
# 사후확률 계산
posterior <- likelihood * prior
# 정규화 (사후확률이 모두 합쳐서 1이 되게 만듦)
posterior <- posterior / sum(posterior)
# 결과 출력
data.frame(theta=theta,prior=prior,
likelihood=likelihood,
posterior=posterior)
library(ggplot2)
df_posterior <- data.frame(theta=theta,prior=prior,
likelihood=likelihood,
posterior=posterior)
ggplot(df_posterior,aes(x=theta))+
geom_line(aes(y=posterior,color='Posterior'))+
geom_line(aes(y=prior,color='Prior'))+
geom_line(aes(y=likelihood/max(likelihood),color='Likelihood'))+
scale_color_manual(values=c('blue','red','green'))+
theme_minimal() +
ylab('Density') +
guides(color = guide_legend(title=NULL))
#5-(1).
# 데이터 설정
x <- c(1, 1, 0, 0, 1)
theta <- 0.5
# 조건부 확률 계산
prob <- dbinom(sum(x), length(x), theta)
print(prob)
#5-(2).
# 가능한 세타 값 설정
theta_values <- seq(0.1 , by=9)
# 각 세타 값에 대해 조건부 확률 계산하고 합하기
marginal_prob <- sum(dbinom(sum(x), length(x), theta_values) * prior) %>% print()
#5-(1).
# 데이터 설정
x <- c(1, 1, 0, 0, 1)
theta <- 0.5
# 조건부 확률 계산
prob <- dbinom(sum(x), length(x), theta)
print(prob)
#5-(2).
# 가능한 세타 값 설정
theta_values <- seq(0.1 , by=9)
# 각 세타 값에 대해 조건부 확률 계산하고 합하기
marginal_prob <- sum(dbinom(sum(x), length(x), theta_values) * prior) %>% print()
# 각 세타 값에 대해 조건부 확률 계산하고 합하기
marginal_prob <- sum(dbinom(sum(x), length(x), theta_values) * prior) %>% print()
# 각 세타 값에 대해 조건부 확률 계산하고 합하기
marginal_prob <- sum(dbinom(sum(x), length(x), theta_values) * prior) %>% print
x <- c(1, 1, 0, 0, 1)
theta <- 0.5
# 조건부 확률 계산
prob <- dbinom(sum(x), length(x), theta)
print(prob)
#5-(2).
# 가능한 세타 값 설정
theta_values <- seq(0.1 , by=9)
# 각 세타 값에 대해 조건부 확률 계산하고 합하기
marginal_prob <- sum(dbinom(sum(x), length(x), theta_values) * prior)
print(marginal_prob)
0.5^5
파이(세타 = 0.5 | (1,1,0,0,1))
= 파이(세타)f((1,1,0,0,1)|세타) / 인티그랄[ 파이(세타)f((1,1,0,0,1)|세타)] 이므로
파이(세타) = 1/9 이다.
1/9 0.5^5/ (1/9*(0.1^3*0.9^2) + ... + 1/9(0.9^3*0.1^2) 이다
a = 0
for(i in seq(0.1,0.9,0.1)){
a = a + i^3 * (1-i)^2
}
a/9
posterior=function(theta){
up=theta ^3 * (1-theta)^2
down =a
return(up/down)
}
posterior(0.5)
theta = seq(0.1,0.9,0.1)
posterior(theta)
#(1)
0.5^5
#(2)
result <- 0 # 결과를 저장할 변수 초기화
for(i in 1:9) {
theta <- i / 10  # 0.1, 0.2, ..., 0.9
term <- (theta^3) * ((1 - theta)^2) * (1/9)
result <- result + term
}
print(result)
