knitr::opts_chunk$set(echo = TRUE)
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l)
plot(theta, prob, type = 'l)
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l)
plot(theta, prob, type = 'l')
plot(theta, prob, type = 'l')
cumsum(prob.sort)
prob.sort = sort(prob, decreasing = T)
level = 0.95
cumsum(prob.sort)
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l')
prob.sort = sort(prob, decreasing = T)
level = 0.95
cumsum(prob.sort)
which(cumsum(prob.sort) >= level))
which(cumsum(prob.sort) >= level)
height = prob.sort[M]
which(cumsum(prob.sort) >= level)
height = prob.sort[M]
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l')
prob.sort = sort(prob, decreasing = T)
level = 0.95
cumsum(prob.sort)
cumsum(prob.sort)
M = min(which(cumsum(prob.sort) >= level))
M = min(which(cumsum(prob.sort) >= level))
height = prob.sort[M]
HPD.index = which(prob >= height)
HPD.level = sum(prob[HPD.index])
res = list(index = HPD.index, level = HPD.level)
low_b = min(theta[res$index])
upper_b = max(theta[res$index])
prob.sort = sort(prob, decreasing = T)
plot(theta, prob, type = 'l')
plot(theta, prob, type = 'l')
abline(low_b, upper_b)
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l')
prob.sort = sort(prob, decreasing = T)
level = 0.95
cumsum(prob.sort)
cumsum(prob.sort)
M = min(which(cumsum(prob.sort) >= level))
M = min(which(cumsum(prob.sort) >= level))
height = prob.sort[M]
HPD.level = sum(prob[HPD.index])
res = list(index = HPD.index, level = HPD.level)
low_b = min(theta[res$index])
upper_b = max(theta[res$index])
plot(theta, prob, type = 'l')
abline(low_b, upper_b)
plot(theta, prob, type = 'l')
abline(c(low_b, upper_b))
low_b
abline(v = c(low_b, upper_b))
plot(theta, prob, type = 'l')
abline(v = c(low_b, upper_b))
plot(theta, prob, type = 'l')
abline(v = c(low_b, upper_b), lty=c(1,1), col=c(3,3))
theta = seq(0, 1, length = 10001)
prob = dbeta(theta, 4, 8)
prob = prob / sum(prob)
plot(theta, prob, type = 'l')
prob.sort = sort(prob, decreasing = T)
level = 0.95
cumsum(prob.sort)
M = min(which(cumsum(prob.sort) >= level))
height = prob.sort[M]
HPD.index = which(prob >= height)
HPD.level = sum(prob[HPD.index])
res = list(index = HPD.index, level = HPD.level)
low_b = min(theta[res$index])
upper_b = max(theta[res$index])
plot(theta, prob, type = 'l')
abline(v = c(low_b, upper_b), lty=c(1,1), col=c(3,3))
# 관측 데이터
observations <- c(1, 1, 0, 1, 0, 0, 0)
# 세타의 추정치를 위한 함수 생성
likelihood_function <- function(theta) {
# 우도함수 계산
likelihood <- prod(theta^observations * (1 - theta)^(1 - observations))
return(likelihood)
}
# 세타의 추정치를 찾기 위해 우도함수의 최대값을 찾는다.
optimize(likelihood_function, interval = c(0, 1), maximum = TRUE)
# 세타의 추정치를 찾기 위해 우도함수의 최대값을 찾는다.
optimize(likelihood_function, interval = c(0, 1), maximum = TRUE)
```{r}
# 또는 로그우도함수를 사용할 수도 있다.
log_likelihood_function <- function(theta) {
# 로그우도함수 계산
log_likelihood <- sum(observations * log(theta) + (1 - observations) * log(1 - theta))
return(log_likelihood)
}
# 로그우도함수를 최대화하는 세타 값을 찾는다.
optimize(log_likelihood_function, interval = c(0, 1), maximum = TRUE)
# 주어진 관측치
observations <- c(1, 1, 0, 1, 0, 0, 0)
# 우도함수 정의
likelihood_function <- function(theta) {
likelihood <- prod(theta^observations * (1 - theta)^(1 - observations))
return(likelihood)
}
# 로그우도함수 정의
log_likelihood_function <- function(theta) {
log_likelihood <- sum(observations * log(theta) + (1 - observations) * log(1 - theta))
return(log_likelihood)
}
# 우도함수를 최대화하는 theta 값을 찾음
MLE_1 <- optimize(likelihood_function, interval = c(0, 1), maximum = TRUE)$maximum
# 결과 출력
cat("우도함수를 최대화하는 세타의 최우추정치:", MLE_1, "\n")
# 로그우도함수를 최대화하는 theta 값을 찾음
MLE_2 <- optimize(log_likelihood_function, interval = c(0, 1), maximum = TRUE)$maximum
# 결과 출력
cat("로그우도함수를 최대화하는 세타의 최우추정치:", MLE_2, "\n")
# 최우추정치를 대입하여 우도함수 값 구하기
likelihood_at_MLE <- likelihood_function(MLE_1)
# 결과 출력
cat("세타의 최우추정치에서의 우도함수 값:", likelihood_at_MLE, "\n")
# 베르누이 시행의 결과와 사전 확률
k <- 5
n <- 20
prior <- rep(1/9, 9)  # 사전 확률: 이산 균일 분포
theta <- seq(0.1, 0.9, by=0.1)  # theta의 가능한 값
# 가능도 계산
likelihood <- theta^k * (1 - theta)^(n - k)
# 사후 확률 계산
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)  # 정규화
# 95% 최대사후구간 계산
cum_posterior <- cumsum(posterior)
lower_bound <- theta[min(which(cum_posterior >= 0.025))]
upper_bound <- theta[max(which(cum_posterior <= 0.975))]
cat("95% 최대사후구간: [", lower_bound, ", ", upper_bound, "]\n")
# 가능한 theta 값
theta <- seq(0.1, 0.9, by = 0.1)
# 사전확률 (균일 분포)
prior <- rep(1/length(theta), length(theta))
# 가능도 함수 계산
likelihood <- dbinom(5, size = 20, prob = theta)
# 사후확률 계산
posterior <- likelihood * prior
posterior
# 정규화 (사후확률의 합이 1이 되도록)
posterior <- posterior / sum(posterior)
# 결과 출력
df <- data.frame(theta=theta, posterior=posterior)
df
# 최대사후구간 (95% credible interval) 계산을 위해 누적확률 계산
cumulative_posterior <- cumsum(posterior)
lower_bound_index <- min(which(cumulative_posterior >= 0.025))
upper_bound_index <- max(which(cumulative_posterior <= 0.975))
lower_bound_theta = theta[lower_bound_index]
upper_bound_theta = theta[upper_bound_index]
cat("95% credible interval: [", lower_bound_theta, ", ", upper_bound_theta, "]\n")
# 사후확률 분포 그래프 생성
p <- ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
geom_point() +
labs(x="Theta", y="Posterior probability",
title="Posterior distribution of theta")
# 95% 최대사후구간
cum_posterior <- cumsum(posterior)
cum_posterior
# 가능한 theta 값
theta <- seq(0.1, 0.9, by = 0.1)
# 사전확률 (균일 분포)
prior <- rep(1/length(theta), length(theta))
# 가능도 함수 계산
likelihood <- dbinom(5, size = 20, prob = theta)
# 사후확률 계산
posterior <- likelihood * prior
# 정규화 (사후확률의 합이 1이 되도록)
posterior <- posterior / sum(posterior)
# 결과 출력
df <- data.frame(theta=theta, posterior=posterior)
df
# 최대사후구간 (95% credible interval) 계산을 위해 누적확률 계산
cumulative_posterior <- cumsum(posterior)
lower_bound_index <- min(which(cumulative_posterior >= 0.025))
upper_bound_index <- max(which(cumulative_posterior <= 0.975))
lower_bound_theta = theta[lower_bound_index]
upper_bound_theta = theta[upper_bound_index]
cat("95% credible interval: [", lower_bound_theta, ", ", upper_bound_theta, "]\n")
# 필요한 라이브러리 로드
library(ggplot2)
# 사후확률 분포 그래프 생성
p <- ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
geom_point() +
labs(x="Theta", y="Posterior probability",
title="Posterior distribution of theta")
print(p)
# 95% 신뢰구간 추가
p + geom_vline(xintercept = lower_bound_theta, linetype="dashed", color = "red") +
geom_vline(xintercept = upper_bound_theta, linetype="dashed", color = "red") +
annotate("text", x = lower_bound_theta, y=max(df$posterior)/2,
label=paste("Lower =", round(lower_bound_theta, 2)), hjust=1.5) +
annotate("text", x = upper_bound_theta, y=max(df$posterior)/2,
label=paste("Upper =", round(upper_bound_theta, 2)), hjust=-0.5)
k <- 5
n <- 20
prior <- rep(1/9, 9)
theta <- seq(0.1, 0.9, by=0.1)
# 가능도 및 사후 확률 계산
likelihood <- theta^k * (1 - theta)^(n - k)
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)  # 정규화
# 사후분포 그리기
plot(theta, posterior, type="b", pch=19, xlab=expression(theta), ylab="Posterior Probability",
main="Posterior Distribution of Theta")
# 95% 최대사후구간 계산 및 표시
cum_posterior <- cumsum(posterior)
lower_bound <- theta[min(which(cum_posterior >= 0.025))]
upper_bound <- theta[max(which(cum_posterior <= 0.975))]
abline(v = lower_bound, col="red", lty=2)
abline(v = upper_bound, col="red", lty=2)
# 최대사후구간 표시
text(lower_bound, max(posterior), labels = sprintf("%.2f", lower_bound), pos=2, col="red")
text(upper_bound, max(posterior), labels = sprintf("%.2f", upper_bound), pos=4, col="red")
# 데이터 및 사전 확률 설정
k <- 5
n <- 20
prior <- rep(1/9, 9)
theta <- seq(0.1, 0.9, by=0.1)
# 가능도 및 사후 확률 계산
likelihood <- theta^k * (1 - theta)^(n - k)
posterior <- likelihood * prior
posterior <- posterior / sum(posterior)  # 정규화
# 사후분포 그리기
plot(theta, posterior, type="b", pch=19, xlab=expression(theta), ylab="Posterior Probability",
main="Posterior Distribution of Theta")
# 95% 최대사후구간 계산 및 표시
cum_posterior <- cumsum(posterior)
lower_bound <- theta[min(which(cum_posterior >= 0.025))]
upper_bound <- theta[max(which(cum_posterior <= 0.975))]
abline(v = lower_bound, col="red", lty=2)
abline(v = upper_bound, col="red", lty=2)
# 사후분포 그리기
plot(theta, posterior, type="b", pch=19, xlab=expression(theta), ylab="Posterior Probability",
main="Posterior Distribution of Theta")
plot(theta, posterior, type="b", pch=19, xlab=expression(theta), ylab="Posterior Probability",
main="Posterior Distribution of Theta")
