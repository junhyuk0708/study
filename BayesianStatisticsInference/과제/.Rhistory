knitr::opts_chunk$set(echo = TRUE)
qbeta(c(0.025, 0.975), 18, 6)
/theta/
\theta\
qbeta(c(0.025, 0.975), 18, 6)
```{r}
a = 1; b = 1
x = 17; n = 22
theta = seq(0, 1, length = 1001)
ftheta = dbeta(theta, a+x, n-x+b)
prob = ftheta/sum(ftheta)
HPD = HPDgrid(prob, 0.95)
HPD.grid = c(min(theta[HPD$index]),max(theta[HPD$index]))
HPD.grid
install.packages("binom")
a = 1; b = 1
x = 17; n = 22
theta = seq(0, 1, length = 1001)
ftheta = dbeta(theta, a+x, n-x+b)
prob = ftheta/sum(ftheta)
HPD = HPDgrid(prob, 0.95)
a = 1; b = 1
x = 17; n = 22
theta = seq(0, 1, length = 1001)
ftheta = dbeta(theta, a+x, n-x+b)
prob = ftheta/sum(ftheta)
HPD = HPDgrid(prob, 0.95)
a=1, b=1, x=17, n=22
a=1; b=1; x=17; n=22
a=3.0742
b=12.1053
a2=a+2
b2=b+8
#(2)
plot(theta, dbeta(theta,a,b),ylab='posterior',type='n')
lines(theta, dbeta(theta,a2,b2),lty=2)
lines(theta, dbeta(theta,a,b),lty=3)
# 2-(2)
plot(theta, dbeta(theta,a,b),ylab='posterior',type='n')
lines(theta, dbeta(theta,a2,b2))
lines(theta, dbeta(theta,a,b),lty=3)
knitr::opts_chunk$set(echo = TRUE)
# 후유증을 보인 환자 수와 총 환자 수
x <- 3  # 성공 (후유증을 보인 환자 수)
n <- 12  # 시도 (총 환자 수)
# 사전 확률의 매개변수 (Beta 분포)
alpha_prior <- 1  # 균등분포로 가정
beta_prior <- 1
# 사후 확률의 매개변수
alpha_post <- alpha_prior + x
beta_post <- beta_prior + n - x
# 사후 확률로부터 샘플링하여 13번째 환자가 후유증을 보일 확률을 계산
set.seed(123)  # 재현 가능한 결과를 위한 시드 설정
samples <- rbeta(100000, alpha_post, beta_post)  # 사후 분포로부터 샘플 추출
# 13번째 환자가 후유증을 보일 확률의 추정
prob_new_patient <- mean(samples)
# 결과 출력
print(paste("13번째 환자가 후유증을 보일 추정 확률: ", round(prob_new_patient, 4)))
CHAPTER6
#1 p.145
x1 = rep(c(0, 1, 2, 3, 4, 5, 6), c(7, 14, 13, 8, 4, 2, 2))
x2 = rep(c(0, 1, 2, 3, 4, 5, 6, 7), c(4, 13, 15, 6, 2, 2, 3, 1))
par(mfrow=c(1,2))
plot(table(x1), xlab="x1", ylab="frequency", main="City 1", type="h",xlim=c(0,7))
plot(table(x2), xlab="x2", ylab="frequency", main="City 2", type="h",xlim=c(0,7))
#2 p.146
a =2; b = 1
n1 = length(x1); s1 = sum(x1)
n2 = length(x2); s2 = sum(x2)
postmean.theta1 = (a+s1)/(b+n1)
postmean.theta2 = (a+s2)/(b+n2)
### plot the posterior
par(mfrow=c(1, 1))
theta <- seq(0, 6, length=100)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, dgamma(theta, a+s2, b+n2), lty=2)
lines(theta, dgamma(theta, a, b), lty=3)
knitr::opts_chunk$set(echo = TRUE)
#3 p.147
a = 1/2; b = 0
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, dgamma(theta, a+s2, b+n2), lty=2)
lines(theta, 1/sqrt(theta), lty=3)
x1 = rep(c(0,1,2,3,4,5), c(3, 2, 4, 3, 2, 1))
x1
length(x1)
#3 p.147
a = 1/2; b = 0
x1 = rep(c(0,1,2,3,4,5), c(3, 2, 4, 3, 2, 1))
n1 = length(x1)
s1 = sum(x1)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
lines(theta, 1/sqrt(theta), lty=3)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
theta <- seq(0, 6, length=100)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
theta <- seq(0, 5, length=100)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
plot(theta, dgamma(theta, a+, b+), type="l", xlab="theta",ylab="p(theta | x)")
plot(theta, dgamma(theta, a, b), type="l", xlab="theta",ylab="p(theta | x)")
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
par(mfrow=c(1,1))
plot(theta, dgamma(theta, a+s1, b+n1), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
knitr::opts_chunk$set(echo = TRUE)
<<<<<<< HEAD
library(ggplot2)
library(ggplot2)
# 사후 확률 함수 정의하기
posterior <- function(theta, data) {
likelihood <- prod(dpois(data, lambda=theta))
prior <- sqrt(1/theta)
return(likelihood * prior)
}
# 주어진 데이터
data <- c(3, 2, 4, 3, 2, 1)
# 그래프를 그리기 위해 theta 값의 시퀀스 생성하기
theta_vals <- seq(0.01, 10, length.out=1000)
# 각 theta에 대한 사후 확률 값 계산하기
posterior_vals <- sapply(theta_vals, function(t) posterior(t, data))
# 사후 확률 값을 정규화하여 적절한 분포로 만들기
posterior_vals <- posterior_vals / sum(posterior_vals)
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
lines(theta, 1/sqrt(theta), lty=3)
library(ggplot2)
# 사후 확률 함수 정의하기
posterior <- function(theta, data) {
likelihood <- prod(dpois(data, lambda=theta))
prior <- sqrt(1/theta)
return(likelihood * prior)
}
# 주어진 데이터
data <- c(3, 2, 4, 3, 2, 1)
# 그래프를 그리기 위해 theta 값의 시퀀스 생성하기
theta_vals <- seq(0.01, 10, length.out=1000)
# 각 theta에 대한 사후 확률 값 계산하기
posterior_vals <- sapply(theta_vals, function(t) posterior(t, data))
# 사후 확률 값을 정규화하여 적절한 분포로 만들기
posterior_vals <- posterior_vals / sum(posterior_vals)
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도") +
lines(theta, 1/sqrt(theta), lty=3)
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
library(ggplot2)
# 사후 확률 함수 정의하기
posterior <- function(theta, data) {
likelihood <- prod(dpois(data, lambda=theta))
prior <- sqrt(1/theta)
return(likelihood * prior)
}
# 주어진 데이터
data <- c(3, 2, 4, 3, 2, 1)
# 그래프를 그리기 위해 theta 값의 시퀀스 생성하기
theta_vals <- seq(0.01, 10, length.out=1000)
# 각 theta에 대한 사후 확률 값 계산하기
posterior_vals <- sapply(theta_vals, function(t) posterior(t, data))
# 사후 확률 값을 정규화하여 적절한 분포로 만들기
posterior_vals <- posterior_vals / sum(posterior_vals)
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line() +
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line(aes(y=posterior), color="blue")
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line(aes(y=posterior), color="blue")
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
df$prior <- 1/sqrt(df$theta)
ggplot(df, aes(x=theta, y=posterior)) +
geom_line(aes(y=posterior), color="blue")
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포", x="Theta", y="밀도")
library(ggplot2)
# 사후 확률 함수 정의하기
posterior <- function(theta, data) {
likelihood <- prod(dpois(data, lambda=theta))
prior <- sqrt(1/theta)
return(likelihood * prior)
}
# 주어진 데이터
data <- c(3, 2, 4, 3, 2, 1)
# 그래프를 그리기 위해 theta 값의 시퀀스 생성하기
theta_vals <- seq(0.01, 10, length.out=1000)
# 각 theta에 대한 사후 확률 값 계산하기
posterior_vals <- sapply(theta_vals, function(t) posterior(t, data))
# 사후 확률 값을 정규화하여 적절한 분포로 만들기
posterior_vals <- posterior_vals / sum(posterior_vals)
# 사후 확률 그리기
df <- data.frame(theta=theta_vals, posterior=posterior_vals)
# 주어진 df 데이터프레임에 Jeffrey의 사전 확률 분포 값을 추가
df$prior <- 1/sqrt(df$theta)
# ggplot을 사용하여 사후 확률 분포와 사전 확률 분포 그리기
ggplot(df, aes(x=theta)) +
geom_line(aes(y=posterior), color="blue") +  # 사후 확률 분포
geom_line(aes(y=prior), linetype="dashed", color="red") +  # Jeffrey의 사전 확률 분포
theme_minimal() +
labs(title="Theta의 사후 확률 분포와 사전 확률 분포", x="Theta", y="밀도") +
scale_y_continuous(name="밀도", sec.axis=sec_axis(~., name="밀도"))
# 파라미터 및 데이터 설정
a = 1/2
b = 0
x <- c(3,2,4,3,2,1)
n = length(x)
s = sum(x)
# theta 값의 범위 설정
theta = seq(0.01, 6, length=100)
# 데이터 프레임 생성
df <- data.frame(
theta = theta,
posterior = dgamma(theta, a+s, b+n),
jeffreys_prior = 1/sqrt(theta)
)
# ggplot을 사용하여 그래프 그리기
ggplot(df, aes(x = theta)) +
geom_line(aes(y = posterior, color = "사후 확률 분포")) +
geom_line(aes(y = jeffreys_prior, color = "Jeffrey 사전 확률 분포"), linetype = "dashed") +
labs(title = "Theta에 대한 확률 분포", x = "theta", y = "p(theta | x)") +
theme_minimal() +
scale_color_manual(values = c("사후 확률 분포" = "blue", "Jeffrey 사전 확률 분포" = "red")) +
theme(legend.title = element_blank())
# 파라미터 및 데이터 설정
a = 1/2
b = 0
x <- c(3,2,4,3,2,1)
n = length(x)
s = sum(x)
# theta 값의 범위 설정
theta <- seq(0, 5, length=100)
# 데이터 프레임 생성
df <- data.frame(
theta = theta,
posterior = dgamma(theta, a+s, b+n),
jeffreys_prior = 1/sqrt(theta)
)
# ggplot을 사용하여 그래프 그리기
ggplot(df, aes(x = theta)) +
geom_line(aes(y = posterior, color = "사후 확률 분포")) +
geom_line(aes(y = jeffreys_prior, color = "Jeffrey 사전 확률 분포"), linetype = "dashed") +
labs(title = "Theta에 대한 확률 분포", x = "theta", y = "p(theta | x)") +
theme_minimal() +
scale_color_manual(values = c("사후 확률 분포" = "blue", "Jeffrey 사전 확률 분포" = "red")) +
theme(legend.title = element_blank())
# ggplot을 사용하여 그래프 그리기
ggplot(df, aes(x = theta)) +
geom_line(aes(y = posterior, color = "사후 확률 분포")) +
geom_line(aes(y = jeffreys_prior, color = "Jeffrey 사전 확률 분포"), linetype = "dashed") +
labs(title = "Theta에 대한 확률 분포", x = "theta", y = "p(theta | x)") +
theme_minimal() +
scale_color_manual(values = c("사후 확률 분포" = "blue", "Jeffrey 사전 확률 분포" = "red")) +
theme(legend.title = element_blank())
# 파라미터 및 데이터 설정
a = 1/2
b = 0
x <- c(3,2,4,3,2,1)
n = length(x)
s = sum(x)
# theta 값의 범위 설정
theta <- seq(0, 6, length=100)
# 데이터 프레임 생성
df <- data.frame(
theta = theta,
posterior = dgamma(theta, a+s, b+n),
jeffreys_prior = 1/sqrt(theta)
)
# ggplot을 사용하여 그래프 그리기
ggplot(df, aes(x = theta)) +
geom_line(aes(y = posterior, color = "사후 확률 분포")) +
geom_line(aes(y = jeffreys_prior, color = "Jeffrey 사전 확률 분포"), linetype = "dashed") +
labs(title = "Theta에 대한 확률 분포", x = "theta", y = "p(theta | x)") +
theme_minimal() +
scale_color_manual(values = c("사후 확률 분포" = "blue", "Jeffrey 사전 확률 분포" = "red")) +
theme(legend.title = element_blank())
=======
# 후유증을 보인 환자 수와 총 환자 수
x <- 3  # 성공 (후유증을 보인 환자 수)
n <- 12  # 시도 (총 환자 수)
# 사전 확률의 매개변수 (Beta 분포)
alpha_prior <- 1  # 균등분포로 가정
beta_prior <- 1
# 사후 확률의 매개변수
alpha_post <- alpha_prior + x
beta_post <- beta_prior + n - x
# 사후 확률로부터 샘플링하여 13번째 환자가 후유증을 보일 확률을 계산
set.seed(123)  # 재현 가능한 결과를 위한 시드 설정
samples <- rbeta(100000, alpha_post, beta_post)  # 사후 분포로부터 샘플 추출
# 13번째 환자가 후유증을 보일 확률의 추정
prob_new_patient <- mean(samples)
# 결과 출력
print(paste("13번째 환자가 후유증을 보일 추정 확률: ", round(prob_new_patient, 4)))
gamma(11.1)*gamma(21)/gamma(32.1)/(gamma(0.1)*gamma(11)/gamma(11.1))
install.packages("extrafont")
install.packages("extrafont")
install.packages("extrafont")
library(extrafont)
font_import(pattern = "Malgun")
>>>>>>> c9dbe732cfa57e7711628e9f6a5833b544ff2268
