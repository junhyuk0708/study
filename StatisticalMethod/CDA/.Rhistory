ggtitle("Normal Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_test()
# x 값 범위와 확률밀도함수 계산
x <- seq(0, 300, by = 1)
lambda <- 1 / 20
y <- lambda * exp(-lambda * x)
# 데이터 프레임 생성
df <- data.frame(x, y)
df
# 그래프 생성
ggplot(df, aes(x = x, y = y)) +
geom_line() +
ggtitle("Exponential Distribution PDF with Mean 200") +
xlab("x") +
ylab("Density") +
coord_cartesian(xlim = c(0, 300), ylim = c(0, 0.025))
# x 값 범위와 확률밀도함수 계산
x <- seq(0, 300, by = 1)
lambda <- 1 / 20
y <- lambda * exp(-lambda * x)
# 데이터 프레임 생성
df <- data.frame(x, y)
df
# 그래프 생성
ggplot(df, aes(x = x, y = y)) +
geom_line() +
ggtitle("Exponential Distribution PDF with Mean 200") +
xlab("x") +
ylab("Density") +
coord_cartesian(xlim = c(0, 300), ylim = c(0, 0.025))
replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
df2 <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
g2 <- ggplot(df2)
g2 <- ggplot(df2, aes(x = x, y = y))
df2 <- data.frame(seq(96, 103, by = 0.1), replicate(1000, mean(rnorm(30, mean = 100, sd =5))))
df2
df
df2
df2 <- data.frame(seq(96, 103, by = 0.1), replicate(1000, mean(rnorm(30, mean = 100, sd =5))))
y <-
df2 <- data.frame(x, y)
x <- seq(96, 103, by = 0.1)
y <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
df2 <- data.frame(x, y)
df2
x <- seq(96, 103, by = 0.1)
y <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
df2 <- data.frame(x, y)
x <- seq(96, 103, by = 0.1)
x
y <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
y
df2
x <- seq(96, 103, 1000)
y <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
x <- seq(96, 103, by=0.1)
y <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
df2 <- data.frame(x, y)
df2 <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
df2
g2 <- ggplot(df2, aes(df2))
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
df2
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
df2 <- data.frame(replicate(1000, mean(rnorm(30, mean = 100, sd =5))))
df2
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
grid.arrange(g1, g2, nrow = 1)
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y)) +
geom_line() +
ggtitle("Normal Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_test()
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
grid.arrange(g1, g2, nrow = 1)
# x 축을 위한 데이터 벡터 생성
x <- seq(80, 120, by = 0.1)
# 정규 분포의 확률밀도함수 계산
y <- dnorm(x, mean = 100, sd = 5)
# 데이터 프레임 생성
df <- data.frame(x, y)
df2 <- data.frame(replicate(1000, mean(rnorm(30, mean = 100, sd =5))))
df2
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y)) +
geom_line() +
ggtitle("Normal Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_test()
g2 <- ggplot(df2, aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
grid.arrange(g1, g2, nrow = 1)
grid.arrange(g2, nrow = 1)
grid.arrange(g2, nrow = 1)
g2
#g2
#grid.arrange(g2, nrow = 1)
```
sample_means <- replicate(1000, mean(rnorm(30, mean=100, sd=5)))
sample_means <- replicate(1000, mean(rnorm(30, mean=100, sd=5)))
# 두 번째 그래프 생성 및 저장
p2 <- ggplot(data.frame(sample_means), aes(sample_means)) +
geom_histogram(bins=30, fill=sbl, color='black') +
geom_vline(aes(xintercept=mean(sample_means)), linetype="dashed", color="red") +
labs(title="n = 30개의 표본 평균(들)", x="표본 평균", y='count')+
theme_bw()
# 두 개의 그래프 배열하여 출력
grid.arrange(p2,nrow=1)
data.frame(sample_means)
sample_means
df2 <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
g2 <- ggplot(dataframe(df2), aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
# x 축을 위한 데이터 벡터 생성
x <- seq(80, 120, by = 0.1)
# 정규 분포의 확률밀도함수 계산
y <- dnorm(x, mean = 100, sd = 5)
# 데이터 프레임 생성
df <- data.frame(x, y)
df2 <- replicate(1000, mean(rnorm(30, mean = 100, sd =5)))
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y)) +
geom_line() +
ggtitle("Normal Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_test()
g2 <- ggplot(dataframe(df2), aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
g2 <- ggplot(data.frame(df2), aes(df2)) +
geom_histogram(bins=30, fill=sbl, color='black')
sample_means <- replicate(1000, mean(rnorm(30, mean=100, sd=5)))
g2
df2
x <- seq(96, 103, length.out=1000)
x
df2 <- data.frame(x, y)
df2
df2
x <- seq(96, 103, length.out=1000)
y <- replicate(1000, mean(rnorm(30, mean = 100, sd = 5)))
df2 <- data.frame(x, y)
df2
View(df2)
g2 <- ggplot(df2, aes(x = x, y =y)) +
geom_histogram(bins=30, fill=sbl, color='black')
g2
View(df2)
View(df)
g2 <- ggplot(data.frame(y), aes(y)) +
geom_histogram(bins=30, fill=sbl, color='black')
g2
g2 <- ggplot(data.frame(y), aes(y)) +
geom_histogram(bins=30, fill=sbl, color='black') +
theme_bw()
g2
# x 값 범위와 확률밀도함수 계산
x <- seq(0, 300, by = 1)
lambda <- 1 / 20
y <- lambda * exp(-lambda * x)
# 데이터 프레임 생성
df <- data.frame(x, y)
df
library(ggplot2)
# x 축을 위한 데이터 벡터 생성
x <- seq(0, 30, by = 0.1)
# 카이제곱 분포의 확률밀도함수 계산 (자유도 3)
y_chi <- dchisq(x, df = 3)
# 데이터 프레임 생성
df <- data.frame(x, y_chi)
# 카이제곱 분포에서 랜덤 샘플 생성 (자유도 3, 샘플 크기 1000)
y_sample <- rchisq(1000, df = 3)
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y_chi)) +
geom_line() +
ggtitle("Chi-Squared Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_minimal()
g2 <- ggplot(data.frame(y_sample), aes(y_sample)) +
geom_histogram(bins=30, fill='blue', color='black') +
ggtitle("Histogram of Chi-Squared Samples") +
theme_minimal()
# 두 개의 그래프 배열하여 출력
grid.arrange(g1, g2, nrow = 1)
# 필요한 라이브러리 불러오기
library(ggplot2)
library(gridExtra)
# x 축을 위한 데이터 벡터 생성 (0부터 300까지)
x <- seq(0, 300, by = 1)
# 카이제곱 분포의 확률밀도함수 계산 (자유도 3)
y_chi <- dchisq(x, df = 3)
# 데이터 프레임 생성
df <- data.frame(x, y_chi)
# 30개의 표본을 뽑아 합을 구하는 작업을 1000번 반복
y_sample_sum <- replicate(1000, sum(rchisq(30, df = 3)))
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y_chi)) +
geom_line() +
ggtitle("Chi-Squared Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_minimal()
g2 <- ggplot(data.frame(y_sample_sum), aes(y_sample_sum)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
ggtitle("Histogram of Sum of 30 Chi-Squared Samples") +
xlim(c(0, 300)) +
theme_minimal()
# 두 개의 그래프 배열하여 출력
grid.arrange(g1, g2, nrow = 1)
g1
# 필요한 라이브러리 불러오기
library(ggplot2)
library(gridExtra)
# x 축을 위한 데이터 벡터 생성 (0부터 300까지)
x <- seq(0, 300, by = 1)
# 카이제곱 분포의 확률밀도함수 계산 (자유도 90)
y_chi <- dchisq(x - 10, df = 90)  # 평균을 100으로 맞추기 위해 x-10 사용
# 데이터 프레임 생성
df <- data.frame(x, y_chi)
# 30개의 표본을 뽑아 합을 구한 뒤 10을 더하는 작업을 1000번 반복
y_sample_sum <- replicate(1000, sum(rchisq(30, df = 3)) + 10)  # 평균을 100으로 맞추기 위해 +10
# 그래프 그리기
g1 <- ggplot(df, aes(x = x, y = y_chi)) +
geom_line() +
ggtitle("Adjusted Chi-Squared Distribution PDF") +
xlab("x") +
ylab("Density") +
theme_minimal()
g2 <- ggplot(data.frame(y_sample_sum), aes(y_sample_sum)) +
geom_histogram(bins = 30, fill = 'blue', color = 'black') +
ggtitle("Histogram of Sum of 30 Chi-Squared Samples (Mean Adjusted)") +
xlim(c(0, 300)) +
theme_minimal()
# 두 개의 그래프 배열하여 출력
grid.arrange(g1, g2, nrow = 1)
# x 축을 위한 데이터 벡터 생성 (0부터 30까지)
x <- seq(0, 30, by = 0.1)
# 자유도가 1, 2, 3, 5, 10인 카이제곱 분포의 확률밀도함수 계산
y_df1 <- dchisq(x, df = 1)
y_df2 <- dchisq(x, df = 2)
y_df3 <- dchisq(x, df = 3)
y_df5 <- dchisq(x, df = 5)
y_df10 <- dchisq(x, df = 10)
# 데이터 프레임 생성
df <- data.frame(x, y_df1, y_df2, y_df3, y_df5, y_df10)
# 그래프 그리기
ggplot(df, aes(x = x)) +
geom_line(aes(y = y_df1, color = 'df = 1')) +
geom_line(aes(y = y_df2, color = 'df = 2')) +
geom_line(aes(y = y_df3, color = 'df = 3')) +
geom_line(aes(y = y_df5, color = 'df = 5')) +
geom_line(aes(y = y_df10, color = 'df = 10')) +
ggtitle("Chi-Squared Distributions with Different Degrees of Freedom") +
xlab("x") +
ylab("Density") +
scale_color_manual(values = c('red', 'blue', 'green', 'purple', 'orange')) +
theme_minimal()
# x 축을 위한 데이터 벡터 생성 (0부터 30까지)
x <- seq(0, 30, by = 0.1)
# 자유도가 1, 2, 3, 5, 10인 카이제곱 분포의 확률밀도함수 계산
y_df1 <- dchisq(x, df = 1)
y_df2 <- dchisq(x, df = 2)
y_df3 <- dchisq(x, df = 3)
y_df5 <- dchisq(x, df = 5)
y_df10 <- dchisq(x, df = 10)
# 데이터 프레임 생성
df <- data.frame(x, y_df1, y_df2, y_df3, y_df5, y_df10)
# 그래프 그리기
ggplot(df, aes(x = x)) +
geom_line(aes(y = y_df1, color = 'df = 4')) +
geom_line(aes(y = y_df2, color = 'df = 14')) +
geom_line(aes(y = y_df3, color = 'df = 29')) +
geom_line(aes(y = y_df5, color = 'df = 39')) +
geom_line(aes(y = y_df10, color = 'df = 49')) +
ggtitle("Chi-Squared Distributions with Different Degrees of Freedom") +
xlab("x") +
ylab("Density") +
scale_color_manual(values = c('red', 'blue', 'green', 'purple', 'orange')) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
customer <- read.csv(paste0(data_path, "customer.sat.csv"))
str(customer)
head(customer, 5)
cas_to_tab <- xtabs(~ item + group, customer)
cas_to_tab <- xtabs(~ item + group, customer)
head(cas_to_tab, 5)
temp <- xtabs(~ item + group, customer)
cas_to_freq <- as.data.frame(temp)
head(cas_to_freq, 5)
tab_to_freq <- as.data.frame(cas_to_tab)
head(tab_to_freq, 5)
freq_to_tab <- xtabs(Freq ~ item + group,
tab_to_freq)
head(freq_to_tab, 5)
freq_to_cas <- tidyr::uncount(
cas_to_freq,
weights = Freq)
head(freq_to_cas, 5)
knitr::opts_chunk$set(echo = TRUE)
# 1. Normal Population Distribution
set.seed(123)
population1 <- rnorm(100000, mean=100, sd=10)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1 <- ggplot(data.frame(x=population1), aes(x)) + geom_density() + xlim(80, 120)
p2 <- ggplot(data.frame(x=sample_means1), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(97, 103)
# 2. Skewed Population Distribution (Using log-normal as an example)
population2 <- rlnorm(100000, meanlog=4.5, sdlog=0.8)
sample_means2 <- replicate(1000, mean(sample(population2, size=30)))
p3 <- ggplot(data.frame(x=population2), aes(x)) + geom_density() + xlim(0, 300)
p4 <- ggplot(data.frame(x=sample_means2), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(50, 150)
# 3. Exponential Population Distribution
population3 <- rexp(100000, rate=0.01)
sample_means3 <- replicate(1000, mean(sample(population3, size=30)))
p5 <- ggplot(data.frame(x=population3), aes(x)) + geom_density() + xlim(0, 500)
p6 <- ggplot(data.frame(x=sample_means3), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(0, 600)
# Display plots
p1
p2
p3
p4
p5
knitr::opts_chunk$set(echo = TRUE)
check <- read.csv(data_path, "mid.measure.csv")
check <- read.csv(paste0(data_path, "mid.measure.csv"))
View(check)
str(check)
mean(check$length)
sd(check$length)
mean(check$length)
sd(check$length)
check %>%
ggplot(aes(length, y = ..density..))
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray")
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray") +
geom_density(color = "red")
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray") +
geom_density(color = "red") +
geom_density(color = "blue", adjust = 2) +
geom_density(color = "green", adjust = 0.5) +
theme_bw()
check %>%
ggplot(aes(sample = length)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 1, linetype = "dashed") +
labs(title = "Probability(Q-Q) plot",
x = "Theoretical quantiles(Standard Normal)",
y = "Sample quantiles(Data)"
) +
theme_bw()
ad.test(check$length)
pearson.test(check$length)
ks.test(check$length, "pnorm")
ks.test(check$length, "pnorm")
ad.tests <- lapply(split(check$length, check$set), ad.test)
ad.tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
ad.tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
ad_tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
p_values
ad_tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
p_values
check %>%
ggplot(aes(sample = length, color = set)) +
geom_qq() +
stat_qq_line(aes(color = set)) +
labs(title = "Q-Q plot by sets",
x = "Standard Normal", y = "Data") +
theme_bw()
check %>%
ggplot(aes(sample = length, color = set)) +
geom_qq() +
stat_qq_line(aes(color = set)) +
labs(title = "Q-Q plot by sets",
x = "Standard Normal", y = "Data") +
theme_bw()
mid <- pars_group(check, length, set, "normal")
mid %>%
bind_rows() %>%
mutate(mean = purrr::map_dbl(fit, "mean"),
sd = purrr::map_dbl(fit, "sd")
) %>%
select(-fit)
mid <- pars_group(check, length, set, "normal")
mid <- pars_group(check, length, set, "normal")
mid <- pars_group(check, length, set, "normal")
check$set
View(lp)
knitr::opts_chunk$set(echo = TRUE)
mid <- pars_group(check, length, set, "normal")
mid %>%
bind_rows() %>%
mutate(mean = purrr::map_dbl(fit, "mean"),
sd = purrr::map_dbl(fit, "sd")
) %>%
select(-fit)
knitr::opts_chunk$set(echo = TRUE)
cargo <- read(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
data_path
cargo <- read.csv(paste0(data_path, "simple.csv"))
data_path
ls
getwd()
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
paste0(getwd())
knitr::opts_chunk$set(echo = TRUE)
data_path
paste0(getwd(), "/data/")
setwd(getwd())
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
getwd
getwd()
data_path = getwd()
data_path
data_path = getwd()
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo
cargo <- read.csv(paste0(data_path, "simple.csv"))
datapath
data_path
data_path = paste0(getwd(), "/data/")
data_path
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo
str(cargo)
cargo <- read.csv(paste0(data_path, "simple.csv"))
str(cargo)
na_count <- function(df){
sapply(df, function(y) sum(length(which(is.na(y)))))
}
na_count
na_count
na_count
na_count(cargo)
x <- cargo$x
y <- cargo$y
Sxy <- sum((x - mean(x)) * (y - mean(y)))
Sxx <- sum((x - mean(x))^2)
Syy <- sum((y - mean(y))^2)
#
hat_beta1 <- Sxy / Sxx
hat_beta0 <- mean(y) - hat_beta1*mean(x)
hat_beta0
hat_beta1
round(c(hat_beta0, hat_beta1), 2)
dist <- read.csv(paste0(data_path), "dist.store.csv")
dist <- read.csv(paste0(data_path, "dist.store.csv"))
str(dist)
head(dist)
tail(dist)
view(dist)
dist <- dist %>%
rename_all(tolower)
dist <- dist %>%
rename_all(tolower)
head(dist, 5)
na_count <- function(df){
sapply(df, function(y) sum(length(which(is.na(y)))))
}
na_count(dist)
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl)
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl) +
theme_bw()
dest_fit <- lm(time ~ case, data = dist)
dest_fit
