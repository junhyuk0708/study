# 각 결함의 평균 값을 계산
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', ...)])  # '...'에 해당하는 컬럼 이름들을 추가해야 합니다.
# 각 결함의 평균 값을 계산
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2')])  # '...'에 해당하는 컬럼 이름들을 추가해야 합니다.
avg_defects
# 가장 높은 결함 값 파악
max_defect <- names(avg_defects)[which.max(avg_defects)]
max_defect
avg_defects
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')
avg_defects
# 각 결함의 평균 값을 계산
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')])
# 가장 높은 결함 값 파악
max_defect <- names(avg_defects)[which.max(avg_defects)]
avg_defects
# 각 결함의 평균 값을 계산
avg_test <- colMeans(test[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')])
avg_test
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
sort()
avg_defects
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
sort(decreasing = TRUE)
avg_defects
# 각 결함의 평균 값을 계산
avg_test <- colMeans(test[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
avg_test
# 각 결함의 평균 값을 계산
avg_test <- colMeans(test[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
avg_test
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
sort(decreasing = TRUE)
avg_defects
View(test)
# 10% 이상의 success_p 값을 가지는 ID들을 필터링
high_defect_ids <- test[test$success_p > 0.10,]
# 10% 이상의 success_p 값을 가지는 데이터의 각 결함의 평균 값을 계산
avg_defects <- colMeans(high_defect_ids[,c('defect1', 'defect2', 'defect3', 'defect4', 'defect5', 'defect6', 'defect7', 'defect8', 'defect9', 'defect10', 'defect11', 'defect12', 'defect13', 'defect14', 'defect15', 'defect16', 'defect17', 'defect18', 'defect19', 'defect20', 'defect21', 'defect22', 'defect23', 'defect24', 'defect25', 'defect26', 'defect27', 'defect28', 'defect29', 'defect30')]) %>%
sort(decreasing = TRUE)
print(avg_defects)
mu1 <- 250
mu2 <- 270
sigma1 <- 10
sigma2 <- 15
c(pnorm(270, mu1, sigma1), pnorm(290, mu2, sigma2))
c(1-pnorm(270, mu1, sigma1), 1-pnrom(290, mu2, sigma2))
c(1-pnorm(270, mu1, sigma1), 1-pnrm(290, mu2, sigma2))
c(1-pnorm(270, mu1, sigma1), 1-pnorm(290, mu2, sigma2))
prob1 <- 1-pnorm(270, mu1, sigma1)
prob2 <- 1-pnorm(290, mu2, sigma2)
prob1 <- 1-pnorm(270, mu1, sigma1)
prob2 <- 1-pnorm(290, mu2, sigma2)
#
x <- seq(200, 320, length.out = 1000)
y1 <- dnorm(x, mu1, sigma1)
y2 <- dnorm(x, mu2, sigma2)
df <- data.frame(x, y1, y2)
#
ggplot(df, aes(x, y1)) +
geom_line(color = lre) +
geom_ribbon(data = subset(df, x > 270),
aes(ymax = y1), ymin = 0, fill = lre,
alpha = 0.5) +
geom_line(aes(x, y2), color = sbl) +
geom_ribbon(data = subset(df, x > 290),
aes(ymax = y2), ymin = 0, fill = sbl,
alpha = 0.5) +
geom_hline(yintercept = 0) +
labs(title = "1/2차 시험 결과", x = "시험 점수",
y = "확률 밀도") +
theme_bw() +
annotate("text", x = 276, y = 0.003,
label = round(prob1, 3)) +
annotate("text", x = 300, y = 0.006,
lable = round(prob2, 3))
prob1 <- 1-pnorm(270, mu1, sigma1)
prob2 <- 1-pnorm(290, mu2, sigma2)
#
x <- seq(200, 320, length.out = 1000)
y1 <- dnorm(x, mu1, sigma1)
y2 <- dnorm(x, mu2, sigma2)
df <- data.frame(x, y1, y2)
#
ggplot(df, aes(x, y1)) +
geom_line(color = lre) +
geom_ribbon(data = subset(df, x > 270),
aes(ymax = y1), ymin = 0, fill = lre,
alpha = 0.5) +
geom_line(aes(x, y2), color = sbl) +
geom_ribbon(data = subset(df, x > 290),
aes(ymax = y2), ymin = 0, fill = sbl,
alpha = 0.5) +
geom_hline(yintercept = 0) +
labs(title = "1/2차 시험 결과", x = "시험 점수",
y = "확률 밀도") +
theme_bw() +
annotate("text", x = 276, y = 0.003,
label = round(prob1, 3)) +
annotate("text", x = 300, y = 0.006,
lable = round(prob2, 3))
#
ggplot(df, aes(x, y1)) +
geom_line(color = lre) +
geom_ribbon(data = subset(df, x > 270),
aes(ymax = y1), ymin = 0, fill = lre,
alpha = 0.5) +
geom_line(aes(x, y2), color = sbl) +
geom_ribbon(data = subset(df, x > 290),
aes(ymax = y2), ymin = 0, fill = sbl,
alpha = 0.5) +
geom_hline(yintercept = 0) +
labs(title = "1/2차 시험 결과", x = "시험 점수",
y = "확률 밀도") +
theme_bw()
prob1 <- 1-pnorm(270, mu1, sigma1)
prob2 <- 1-pnorm(290, mu2, sigma2)
#
x <- seq(200, 320, length.out = 1000)
y1 <- dnorm(x, mu1, sigma1)
y2 <- dnorm(x, mu2, sigma2)
df <- data.frame(x, y1, y2)
#
ggplot(df, aes(x, y1)) +
geom_line(color = lre) +
geom_ribbon(data = subset(df, x > 270),
aes(ymax = y1), ymin = 0, fill = lre,
alpha = 0.5) +
geom_line(aes(x, y2), color = sbl) +
geom_ribbon(data = subset(df, x > 290),
aes(ymax = y2), ymin = 0, fill = sbl,
alpha = 0.5) +
geom_hline(yintercept = 0) +
labs(title = "1/2차 시험 결과", x = "시험 점수",
y = "확률 밀도") +
theme_bw() +
annotate("text", x = 276, y = 0.003,
lable = round(prob1, 3)) +
annotate("text", x = 300, y = 0.006,
lable = round(prob2, 3))
```{r}
prob1 <- 1-pnorm(270, mu1, sigma1)
prob2 <- 1-pnorm(290, mu2, sigma2)
#
x <- seq(200, 320, length.out = 1000)
y1 <- dnorm(x, mu1, sigma1)
y2 <- dnorm(x, mu2, sigma2)
df <- data.frame(x, y1, y2)
#
ggplot(df, aes(x, y1)) +
geom_line(color = lre) +
geom_ribbon(data = subset(df, x > 270),
aes(ymax = y1), ymin = 0, fill = lre,
alpha = 0.5) +
geom_line(aes(x, y2), color = sbl) +
geom_ribbon(data = subset(df, x > 290),
aes(ymax = y2), ymin = 0, fill = sbl,
alpha = 0.5) +
geom_hline(yintercept = 0) +
labs(title = "1/2차 시험 결과", x = "시험 점수",
y = "확률 밀도") +
theme_bw() +
annotate("text", x = 276, y = 0.003,
label = round(prob1, 3)) +
annotate("text", x = 300, y = 0.006,
label = round(prob2, 3))
knitr::opts_chunk$set(echo = TRUE)
dist <- read.csv(paste0(data_path, "dist.store.csv"))
dist <- read.csv(paste0(data_path, "dist.store.csv"))
-   데이터 확인
```{r}
str(dist)
head(dist)
tail(dist)
view(dist)
dist <- dist %>%
rename_all(tolower)
head(dist, 5)
head(dist, 5)
```{r}
na_count <- function(df){
sapply(df, function(y) sum(length(which(is.na(y)))))
}
na_count(dist)
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl) +
theme_bw()
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl) +
theme_bw()
dest_fit <- lm(time ~ case, data = dist)
summary(dist_fit)
dist_fit <- lm(time ~ case, data = dist)
dist_fit <- lm(time ~ case, data = dist)
-   분석 결과 확인
```{r}
summary(dist_fit)
mu1 <- 30
mu2 <- 200
sigma1 <- 3
sigma2 <- 25
c(1-pnorm(35, mu1, sigma1), pnorm(150, mu2, sigma2))
prop.test(28, 658, 0.07, alternative = "less")
defect <- c(72, 28)
n <- c(1000, 700)
prop.test(defect, n)
prop.test(defect, n, alpha = 0.05)
prop.test(defect, n)
?prop.test(defect, n)
prop.test(defect, n)
ds <- read.csv(paste0(data_path, "customer.ds.csv"))
str(ds)
ds1 <- ds %>%
mutate(service = factor(service))
# 막대그래프 생성 (dodge position)
ds1_plot <- ggplot(data = ds1, aes(x = design, fill = service)) +
geom_bar(position = "dodge") +
labs(x = "Design", y = "Freq", fill = "Service") +
theme_bw()
print(ds1_plot)  # 그래프 출력
# 데이터 전처리
ds2 <- ds %>%
mutate(service = factor(service))
# 막대그래프 생성 (fill position)
ds2_plot <- ggplot(data = ds2, aes(x = design, fill = service)) +
geom_bar(position = "fill") +
labs(x = "Design", y = "Percent", fill = "Service") +
scale_y_continuous(labels = scales::percent) +
theme_bw()
ds$d.satisfied
ds$d.satisfied <- ifelse(ds$design >= 4, "Yes", "No")
ds$s.satisfied <- ifelse(ds$service >= 4, "Yes", "No")
comparison <- table(ds$d.satisfied, ds$s.satisfied)
prop.test(comparison)
ds2_plot
gridExtra::grid.arrange(ds1_plot, ds2_plot, ncol = 2)
# 막대그래프 생성 (dodge position)
ds1_plot <- ggplot(data = ds, aes(x = design, fill = factor(service), group = service)) +
geom_bar(position = "dodge") +
labs(x = "Design", y = "Freq", fill = "Service") +
theme_bw()
# 막대그래프 생성 (fill position)
ds2_plot <- ggplot(data = ds, aes(x = design, fill = factor(service), group = service)) +
geom_bar(position = "fill") +
labs(x = "Design", y = "Percent", fill = "Service") +
scale_y_continuous(labels = scales::percent) +
theme_bw()
gridExtra::grid.arrange(ds1_plot, ds2_plot, ncol = 2)
consumer <- matrix(c(734, 96, 66, 704), nrow = 2, ncol = 2)
dimnames(consumer) <- list(before.adv = c("buy", "not buy"),
after.adv = c("buy", "not buy"))
consumer
mcnemar.test(consumer)
claim <- read.csv(paste0(data_path, "claim.area.2019.csv"))
str(claim19)
claim109 <- read.csv(paste0(data_path, "claim.area.2019.csv"))
claim19 <- read.csv(paste0(data_path, "claim.area.2019.csv"))
str(claim19)
#
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_colors) +
theme_bw()
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_colors) +
theme_bw()
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = sbl) +
theme_bw()
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = sbl) +
scale_y_continuous(labels = scales::percent) +
theme_bw()
claim19 <- read.csv(paste0(data_path, "claim.area.2019.csv"))
str(claim19)
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = sbl) +
theme_bw()
```{r}
my_color <- c(lre, sbl, ngr, lgo)
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
theme_bw()
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
theme_bw()
#
claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
scale_y_continuous(labels = scales::percent) +
theme_bw()
gridExtra::grid.arrange(g1, g2, ncol =2)
my_color <- c(lre, sbl, ngr, lgo)
#
g1 <- claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
theme_bw()
#
g2 <-   claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
scale_y_continuous(labels = scales::percent) +
theme_bw()
gridExtra::grid.arrange(g1, g2, ncol =2)
my_color <- c(lre, sbl, ngr, lgo)
#
g1 <- claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
theme_bw()
#
g2 <-   claim19 %>%
ggplot(aes(x = model, y = frequency, fill = area)) +
geom_bar(stat = "identity", position = "fill") +
labs(title = "Contingency Table",
x = "모델명", y = "빈도") +
scale_fill_manual(values = my_color) +
scale_y_continuous(labels = scales::percent) +
theme_bw()
gridExtra::grid.arrange(g1, g2, ncol =2)
claim19_t <- xtabs(frequency ~ model + area, claim19)
vcd::doubledecker(claim19_t)
result <- chisq.test(claim19_t)
result
result$p.value
result$expected
claim19_t <- xtabs(frequency ~ model + area, claim19)
vcd::mosaic(claim19_t,
gp = shading_max,
labeling = labeling_residuals,
digits = 2
)
claim19_2 <- claim19 %>%
dplyr::filter(area != "1Domestic")
claim19_t2 <- xtabs(frequency ~ model + area, claim19_2)
vcd::doubledecker(claim19_t2, spacing = spacing_highlighting,
main = "Customer Claims 2019")
result_2 <- chisq.test(claim19_t2)
result_2
result_2$p.value
result_2$expected
mosaic(claim19_t2, gp = shading_max, labeling = labeling_residuals, digits = 2)
defect <- read.csv(paste0(data_path, "auto.defect.csv"))
srt(defect)
str(defect)
mean(defect$times)
sd(defect$times)
ad.test(defect$times)
pearson.test(defect$times)
ks.test(defect$times, "pnorm")
x <- defect$times
bc <- boxcox(x ~ 1)
lambda <- round(bc$x[which.max(bc$y)], 2)
x_trans <- (x^lambda -1) / lambda
ad.test(x_trans)
defect$trans0
defect$trans0.2 <- x_trans
defect$trans0.2 <- x_trans
mean_by_trans <- ((mean(x_trans)*lambda) + 1)^(1/lambda)
mean <- mean(defect$times)
mean_by_trans <- ((mean(x_trans)*lambda) + 1)^(1/lambda)
c(mean, mean_by_trans)
knitr::opts_chunk$set(echo = TRUE)
a = 1/2; b = 0
x <- c(3,2,4,3,2,1)
n = length(x); s = sum(x)
postmean.theta = (a+s)/(b+n)
theta=seq(0,6,length=100)
plot(theta, dgamma(theta, a+s, b+n), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
legend(3.5, 0.4, legend=c(paste("오타수")
, paste("Jeffrey prior")),
lty=c(1, 3), bty="n")
s = sum(x)
a = 1/2; b = 0
x <- c(3,2,4,3,2,1)
n = length(x)
s = sum(x)
s
a = 1/2; b = 0
x <- c(3,2,4,3,2,1)
n = length(x)
s = sum(x)
postmean.theta = (a+s)/(b+n)
theta=seq(0,6,length=100)
#gamma(15.5,6)
plot(theta, dgamma(theta, a+s, b+n), type="l", xlab="theta",ylab="p(theta | x)")
lines(theta, 1/sqrt(theta), lty=3)
legend(4, 0.4,
legend=c(paste("TYPO"),
paste("Jeffrey")),
lty=c(1, 3), bty="n")
# prior parameters
alpha_prior <- 1
beta_prior <- 1
# observed data
x <- 12
beta_posterior <- beta_prior + 1
# prior and posterior means of theta
prior_mean_theta <- alpha_prior / beta_prior
posterior_mean_theta <- alpha_posterior / beta_posterior
print(paste("Prior mean of theta: ", prior_mean_theta))
print(paste("Prior mean of theta: ", prior_mean_theta))
print(paste("Posterior mean of theta: ", posterior_mean_theta))
alpha_prior <- 1
beta_prior <- 1
x <- 12
# posterior parameters
alpha_posterior <- alpha_prior + x
beta_posterior <- beta_prior + 1
# 사전 / 사후
prior_mean_theta <- alpha_prior / beta_prior
posterior_mean_theta <- alpha_posterior / beta_posterior
print(paste("사전 평균: ", prior_mean_theta))
print(paste("사후 평균: ", posterior_mean_theta))
a=1
b=1
n1=100
n2=100
s1=225
s2=210
sim=10000
theta1=rgamma(sim,a+s1,b+n1)
theta2=rgamma(sim,a+s2,b+n2)
eta=log(theta1/theta2)
mean(eta)
HPD=HPDsample(eta)
plot(density(eta),type='l')
abline(v=HPD,lty=2)
abline(v=mean(eta))
HPDsample <- function(theta,level=0.95){
N=length(theta)
theta.sort=sort(theta)
M=ceiling(N*level)
nCI=N-M
CI.width=rep(0,nCI)
for(i in 1:nCI) CI.width[i]=theta.sort[i+M]-theta.sort[i]
index=which.min(CI.width)
HPD=c(theta.sort[index], theta.sort[index+M])
return(HPD)
}
a <- 1
b <- 1
n1 <- 100
n2 <- 100
s1 <- 225
s2 <- 210
nsim=10000
theta1=rgamma(nsim,a+s1,b+n1)
theta2=rgamma(nsim,a+s2,b+n2)
eta=log(theta1/theta2)
mean(eta)
HPD=HPDsample(eta)
par(mfrow=c(1,1))
plot(density(eta),type='l')
abline(v=HPD,lty=2)
abline(v=mean(eta))
a <- 2
b <- 1
s <- 12
n <- 10
theta <- seq(0, 3, length.out = 1000)
plot(theta, dgamma(theta, a+s, b+n), type="l", xlab="theta",ylab="p(theta | x)")
legend("topright","Posterior",lty=1,lwd=2)
