# 자유도가 1, 2, 3, 5, 10인 카이제곱 분포의 확률밀도함수 계산
y_df1 <- dchisq(x, df = 1)
y_df2 <- dchisq(x, df = 2)
y_df3 <- dchisq(x, df = 3)
y_df5 <- dchisq(x, df = 5)
y_df10 <- dchisq(x, df = 10)
# 데이터 프레임 생성
df <- data.frame(x, y_df1, y_df2, y_df3, y_df5, y_df10)
# 그래프 그리기
ggplot(df, aes(x = x)) +
geom_line(aes(y = y_df1, color = 'df = 1')) +
geom_line(aes(y = y_df2, color = 'df = 2')) +
geom_line(aes(y = y_df3, color = 'df = 3')) +
geom_line(aes(y = y_df5, color = 'df = 5')) +
geom_line(aes(y = y_df10, color = 'df = 10')) +
ggtitle("Chi-Squared Distributions with Different Degrees of Freedom") +
xlab("x") +
ylab("Density") +
scale_color_manual(values = c('red', 'blue', 'green', 'purple', 'orange')) +
theme_minimal()
# x 축을 위한 데이터 벡터 생성 (0부터 30까지)
x <- seq(0, 30, by = 0.1)
# 자유도가 1, 2, 3, 5, 10인 카이제곱 분포의 확률밀도함수 계산
y_df1 <- dchisq(x, df = 1)
y_df2 <- dchisq(x, df = 2)
y_df3 <- dchisq(x, df = 3)
y_df5 <- dchisq(x, df = 5)
y_df10 <- dchisq(x, df = 10)
# 데이터 프레임 생성
df <- data.frame(x, y_df1, y_df2, y_df3, y_df5, y_df10)
# 그래프 그리기
ggplot(df, aes(x = x)) +
geom_line(aes(y = y_df1, color = 'df = 4')) +
geom_line(aes(y = y_df2, color = 'df = 14')) +
geom_line(aes(y = y_df3, color = 'df = 29')) +
geom_line(aes(y = y_df5, color = 'df = 39')) +
geom_line(aes(y = y_df10, color = 'df = 49')) +
ggtitle("Chi-Squared Distributions with Different Degrees of Freedom") +
xlab("x") +
ylab("Density") +
scale_color_manual(values = c('red', 'blue', 'green', 'purple', 'orange')) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
customer <- read.csv(paste0(data_path, "customer.sat.csv"))
str(customer)
head(customer, 5)
cas_to_tab <- xtabs(~ item + group, customer)
cas_to_tab <- xtabs(~ item + group, customer)
head(cas_to_tab, 5)
temp <- xtabs(~ item + group, customer)
cas_to_freq <- as.data.frame(temp)
head(cas_to_freq, 5)
tab_to_freq <- as.data.frame(cas_to_tab)
head(tab_to_freq, 5)
freq_to_tab <- xtabs(Freq ~ item + group,
tab_to_freq)
head(freq_to_tab, 5)
freq_to_cas <- tidyr::uncount(
cas_to_freq,
weights = Freq)
head(freq_to_cas, 5)
knitr::opts_chunk$set(echo = TRUE)
# 1. Normal Population Distribution
set.seed(123)
population1 <- rnorm(100000, mean=100, sd=10)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1 <- ggplot(data.frame(x=population1), aes(x)) + geom_density() + xlim(80, 120)
p2 <- ggplot(data.frame(x=sample_means1), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(97, 103)
# 2. Skewed Population Distribution (Using log-normal as an example)
population2 <- rlnorm(100000, meanlog=4.5, sdlog=0.8)
sample_means2 <- replicate(1000, mean(sample(population2, size=30)))
p3 <- ggplot(data.frame(x=population2), aes(x)) + geom_density() + xlim(0, 300)
p4 <- ggplot(data.frame(x=sample_means2), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(50, 150)
# 3. Exponential Population Distribution
population3 <- rexp(100000, rate=0.01)
sample_means3 <- replicate(1000, mean(sample(population3, size=30)))
p5 <- ggplot(data.frame(x=population3), aes(x)) + geom_density() + xlim(0, 500)
p6 <- ggplot(data.frame(x=sample_means3), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(0, 600)
# Display plots
p1
p2
p3
p4
p5
knitr::opts_chunk$set(echo = TRUE)
check <- read.csv(data_path, "mid.measure.csv")
check <- read.csv(paste0(data_path, "mid.measure.csv"))
View(check)
str(check)
mean(check$length)
sd(check$length)
mean(check$length)
sd(check$length)
check %>%
ggplot(aes(length, y = ..density..))
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray")
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray") +
geom_density(color = "red")
check %>%
ggplot(aes(length, y = ..density..)) +
geom_histogram(color = "white", fill = "gray") +
geom_density(color = "red") +
geom_density(color = "blue", adjust = 2) +
geom_density(color = "green", adjust = 0.5) +
theme_bw()
check %>%
ggplot(aes(sample = length)) +
stat_qq(color = "blue") +
stat_qq_line(color = "red") +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 1, linetype = "dashed") +
labs(title = "Probability(Q-Q) plot",
x = "Theoretical quantiles(Standard Normal)",
y = "Sample quantiles(Data)"
) +
theme_bw()
ad.test(check$length)
pearson.test(check$length)
ks.test(check$length, "pnorm")
ks.test(check$length, "pnorm")
ad.tests <- lapply(split(check$length, check$set), ad.test)
ad.tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
ad.tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
ad_tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
p_values
ad_tests <- lapply(split(check$length, check$set), ad.test)
p_values <- sapply(ad_tests, function(x) x$p.value)
p_values
check %>%
ggplot(aes(sample = length, color = set)) +
geom_qq() +
stat_qq_line(aes(color = set)) +
labs(title = "Q-Q plot by sets",
x = "Standard Normal", y = "Data") +
theme_bw()
check %>%
ggplot(aes(sample = length, color = set)) +
geom_qq() +
stat_qq_line(aes(color = set)) +
labs(title = "Q-Q plot by sets",
x = "Standard Normal", y = "Data") +
theme_bw()
mid <- pars_group(check, length, set, "normal")
mid %>%
bind_rows() %>%
mutate(mean = purrr::map_dbl(fit, "mean"),
sd = purrr::map_dbl(fit, "sd")
) %>%
select(-fit)
mid <- pars_group(check, length, set, "normal")
mid <- pars_group(check, length, set, "normal")
mid <- pars_group(check, length, set, "normal")
check$set
View(lp)
knitr::opts_chunk$set(echo = TRUE)
mid <- pars_group(check, length, set, "normal")
mid %>%
bind_rows() %>%
mutate(mean = purrr::map_dbl(fit, "mean"),
sd = purrr::map_dbl(fit, "sd")
) %>%
select(-fit)
knitr::opts_chunk$set(echo = TRUE)
cargo <- read(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo <- read.csv(paste0(data_path, "simple.csv"))
data_path
cargo <- read.csv(paste0(data_path, "simple.csv"))
data_path
ls
getwd()
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
getwd()
paste0(getwd())
knitr::opts_chunk$set(echo = TRUE)
data_path
paste0(getwd(), "/data/")
setwd(getwd())
getwd()
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
data_path
knitr::opts_chunk$set(echo = TRUE)
getwd
getwd()
data_path = getwd()
data_path
data_path = getwd()
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo
cargo <- read.csv(paste0(data_path, "simple.csv"))
datapath
data_path
data_path = paste0(getwd(), "/data/")
data_path
cargo <- read.csv(paste0(data_path, "simple.csv"))
cargo
str(cargo)
cargo <- read.csv(paste0(data_path, "simple.csv"))
str(cargo)
na_count <- function(df){
sapply(df, function(y) sum(length(which(is.na(y)))))
}
na_count
na_count
na_count
na_count(cargo)
x <- cargo$x
y <- cargo$y
Sxy <- sum((x - mean(x)) * (y - mean(y)))
Sxx <- sum((x - mean(x))^2)
Syy <- sum((y - mean(y))^2)
#
hat_beta1 <- Sxy / Sxx
hat_beta0 <- mean(y) - hat_beta1*mean(x)
hat_beta0
hat_beta1
round(c(hat_beta0, hat_beta1), 2)
dist <- read.csv(paste0(data_path), "dist.store.csv")
dist <- read.csv(paste0(data_path, "dist.store.csv"))
str(dist)
head(dist)
tail(dist)
view(dist)
dist <- dist %>%
rename_all(tolower)
dist <- dist %>%
rename_all(tolower)
head(dist, 5)
na_count <- function(df){
sapply(df, function(y) sum(length(which(is.na(y)))))
}
na_count(dist)
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl)
dist %>%
ggplot(aes(case, time)) +
geom_point(color = sbl) +
theme_bw()
dest_fit <- lm(time ~ case, data = dist)
dest_fit
knitr::opts_chunk$set(echo = TRUE)
check
summary(check)
z = c(1:3, NA)
z
z == NA
c <- 1:1
c <- 1:10
c
"+"(2,3)
"*"(2,3)
x <- 1:100
x
x>50
sum(x>50)
knitr::opts_chunk$set(echo = TRUE)
unit1 = c(10, 10, 10, 50, 30, 40, 50, 40, 30 ,50)
unit2 = c(20, 30, 40, 10, 20, 20, 20, 30, 50, 40)
results <- ((unit1 + unit2) / 2) %>% print()
unit1 = c(10, 10, 10, 50, 30, 40, 50, 40, 30 ,50)
unit2 = c(20, 30, 40, 10, 20, 20, 20, 30, 50, 40)
results <- ((unit1 + unit2) / 2) %>% print()
# 결과를 데이터 프레임으로 변환
df <- data.frame(Sample.Mean = results)
df
# 도트 플롯으로 시각화하기
ggplot(df, aes(x = Sample.Mean)) +
geom_dotplot(binwidth = 0.5, stackdir = "center", color=sbl, fill= sbl) +
labs(title="모평균과 표본 평균(n = 2)", x="표본 평균", y="빈도") +
ylim(0, 1) +
theme_bw() +
geom_vline(xintercept=30, linetype="dashed", color = "brown")
unit1 = c(10, 10, 10, 50, 30, 40, 50, 40, 30 ,50)
unit2 = c(20, 30, 40, 10, 20, 20, 20, 30, 50, 40)
results <- ((unit1 + unit2) / 2) %>% print()
# 결과를 데이터 프레임으로 변환
df <- data.frame(Sample.Mean = results)
df
# 도트 플롯으로 시각화하기
ggplot(df, aes(x = Sample.Mean)) +
geom_dotplot(binwidth = 0.5, stackdir = "center", color=sbl, fill= sbl) +
labs(title="모평균과 표본 평균(n = 2)", x="표본 평균", y="빈도") +
ylim(0, 1) +
theme_bw() +
geom_vline(xintercept=30, linetype="dashed", color = lre)
# 1. Normal Population Distribution
set.seed(123)
population1 <- rnorm(100000, mean=100, sd=10)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1 <- ggplot(data.frame(x=population1), aes(x)) + geom_density() + xlim(80, 120)
p2 <- ggplot(data.frame(x=sample_means1), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(97, 103)
# 2. Skewed Population Distribution (Using log-normal as an example)
population2 <- rlnorm(100000, meanlog=4.5, sdlog=0.8)
sample_means2 <- replicate(1000, mean(sample(population2, size=30)))
p3 <- ggplot(data.frame(x=population2), aes(x)) + geom_density() + xlim(0, 300)
p4 <- ggplot(data.frame(x=sample_means2), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(50, 150)
# 3. Exponential Population Distribution
population3 <- rexp(100000, rate=0.01)
sample_means3 <- replicate(1000, mean(sample(population3, size=30)))
p5 <- ggplot(data.frame(x=population3), aes(x)) + geom_density() + xlim(0, 500)
p6 <- ggplot(data.frame(x=sample_means3), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(0, 600)
p3
p4
population1 <- rnorm(1000000, mean=100, sd=10)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1
print(p1, p2)
# 1. Normal Population Distribution
set.seed(123)
population1 <- rnorm(1000, mean=100, sd=10)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1 <- ggplot(data.frame(x=population1), aes(x)) + geom_density() + xlim(80, 120)
p2 <- ggplot(data.frame(x=sample_means1), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(97, 103)
print(p1, p2)
# 1. Normal Population Distribution
set.seed(123)
population1 <- rnorm(1000, mean=100, sd=5)
sample_means1 <- replicate(1000, mean(sample(population1, size=30)))
p1 <- ggplot(data.frame(x=population1), aes(x)) + geom_density() + xlim(80, 120)
p2 <- ggplot(data.frame(x=sample_means1), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(97, 103)
# 2. Skewed Population Distribution (Using log-normal as an example)
population2 <- rlnorm(1000, meanlog=4.5, sdlog=0.8)
sample_means2 <- replicate(1000, mean(sample(population2, size=30)))
p3 <- ggplot(data.frame(x=population2), aes(x)) + geom_density() + xlim(0, 300)
p4 <- ggplot(data.frame(x=sample_means2), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(50, 150)
# 3. Exponential Population Distribution
population3 <- rexp(1000, rate=0.01)
sample_means3 <- replicate(1000, mean(sample(population3, size=30)))
p5 <- ggplot(data.frame(x=population3), aes(x)) + geom_density() + xlim(0, 500)
p6 <- ggplot(data.frame(x=sample_means3), aes(x)) + geom_histogram(aes(y=..density..), bins=30) + xlim(0, 600)
knitr::opts_chunk$set(echo = TRUE)
table_data <- data.frame(
통계량 = c("비율", "평균 간격", "평균", "분산"),
모수 = c("p", "λ", "μ", "σ^2"),
통계량값 = c("$\\hat{p} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\hat{λ} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n}(y_i - \\bar{y})^2$"),
정의범위 = c("$y_i = 0,1$", "$y_i = 0,1,2,...$", "$y_i = [-\\infty, \\infty]$", "$\\forall y_i$")
)
kable(table_data, caption = "통계량의 표본추출분포", format = "latex", escape = FALSE, align = 'c')
library(knitr)
table_data <- data.frame(
통계량 = c("비율", "평균 간격", "평균", "분산"),
모수 = c("p", "λ", "μ", "σ^2"),
통계량값 = c("$\\hat{p} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\hat{λ} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n}(y_i - \\bar{y})^2$"),
정의범위 = c("$y_i = 0,1$", "$y_i = 0,1,2,...$", "$y_i = [-\\infty, \\infty]$", "$\\forall y_i$")
)
kable(table_data, caption = "통계량의 표본추출분포", format = "latex", escape = FALSE, align = 'c')
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
table_data <- data.frame(
통계량 = c("비율", "평균 간격", "평균", "분산"),
모수 = c("p", "λ", "μ", "σ^2"),
통계량값 = c("$\\hat{p} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\hat{λ} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$\\bar{y} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$",
"$s^2 = \\frac{1}{n-1}\\sum_{i=1}^{n}(y_i - \\bar{y})^2$"),
정의범위 = c("$y_i = 0,1$", "$y_i = 0,1,2,...$", "$y_i = [-\\infty, \\infty]$", "$\\forall y_i$")
)
kable(table_data, caption = "통계량의 표본추출분포", format = "latex", escape = FALSE, align = 'c')
데이터 생성
# 데이터 생성
n <- 10000
# Normal(100, 10)
normal_1 <- rnorm(n, mean=100, sd=10)
cum_normal_1 <- cumsum(normal_1) / (1:n)
# Normal(90, 20)
normal_2 <- rnorm(n, mean=90, sd=20)
cum_normal_2 <- cumsum(normal_2) / (1:n)
# Uniform(40, 120)
uniform_data <- runif(n, min=40, max=120)
cum_uniform <- cumsum(uniform_data) / (1:n)
# 그래프 그리기
plot_df <- data.frame(
Iteration = 1:n,
Normal_100_10 = cum_normal_1,
Normal_90_20 = cum_normal_2,
Uniform_40_120 = cum_uniform
)
ggplot(plot_df, aes(Iteration)) +
geom_line(aes(y = Normal_100_10, color = "Normal(100, 10)")) +
geom_line(aes(y = Normal_90_20, color = "Normal(90, 20)")) +
geom_line(aes(y = Uniform_40_120, color = "Uniform(40, 120)")) +
labs(y = "평균값", x = "표본 크기", title = "큰 수의 법칙") +
theme_minimal() +
scale_color_manual(values = c(sbl, lre, lgo))
normal_1
cum_normal_1
qt(0.025, df = 10) # 결과: -2.23
qt(0.975, df = 10) # 결과: 2.23
qt(0.025, df = 10) # 결과: -2.23
qt(0.025, df = 30) # 결과: -2.23
qt(0.975, df = 10) # 결과: 2.23
qt(0.975, df = 30) # 결과: 2.23
qnorm(0.025, df = 30) # 결과: -2.04
qnorm(0.025) # 결과: -2.04
qnorm(0.975) # 결과: -1.96
# x 범위 정의
x = np.linspace(-5, 5, 1000)
# 표준 정규 분포
pdf_norm = norm.pdf(x, 0, 1)
# t-분포 (자유도 10)
pdf_t = t.pdf(x, df=10)
plt.figure(figsize=(8, 6))
plt.plot(x, pdf_norm, label='Normal Distribution', color='blue')
plt.plot(x, pdf_t, label='t-Distribution (df=10)', color='red', linestyle='--')
# x 범위 정의
x = np.linspace(-5, 5, 1000)
from scipy.stats import norm, t
qchisq(0.025, df = 49)
qchisq(0.975, df = 49)
qchisq(0.025, df = 49)
qchisq(0.975, df = 49) #
# x 범위 정의
x <- seq(-5, 5, by=0.01)
# 표준 정규 분포
pdf_norm <- dnorm(x, mean=0, sd=1)
# t-분포 (자유도 10)
pdf_t <- dt(x, df=10)
# 데이터프레임 생성
df <- data.frame(x, pdf_norm, pdf_t)
# 그래프 그리기
ggplot(df, aes(x=x)) +
geom_line(aes(y=pdf_norm, color='Normal Distribution')) +
geom_line(aes(y=pdf_t, color='t-Distribution (df=10)'), linetype="dashed") +
labs(title="Standard Normal vs. t-Distribution",
x="Value",
y="Density",
color="Distribution") +
theme_minimal()
# 그래프 그리기
ggplot(df, aes(x=x)) +
geom_line(aes(y=pdf_norm, color='Normal Distribution')) +
geom_line(aes(y=pdf_t, color='t-Distribution (df=10)'), linetype="dashed") +
labs(title="Standard Normal vs. t-Distribution",
x="Value",
y="Density",
color="Distribution") +
theme_bw()
# x 범위 정의
x <- seq(-5, 5, by=0.01)
# 표준 정규 분포
pdf_norm <- dnorm(x, mean=0, sd=1)
# t-분포 (자유도 10)
pdf_t <- dt(x, df=10)
# 데이터프레임 생성
df <- data.frame(x, pdf_norm, pdf_t)
# 그래프 그리기
ggplot(df, aes(x=x)) +
geom_line(aes(y=pdf_norm, color='Normal Distribution')) +
geom_line(aes(y=pdf_t, color='t-Distribution (df=10)'), linetype="dashed") +
labs(title="Standard Normal vs. t-Distribution",
x="Value",
y="Density",
color="Distribution") +
theme_bw()
# x 범위 정의
x <- seq(0, 5, by=0.01)
# F 분포 자유도 조합 정의
dfs <- list(c(10,10), c(10,30), c(10,5), c(30,10), c(30,30), c(30,5), c(5,10), c(5,30), c(5,5))
# 각 자유도 조합에 대한 F 분포 계산
pdfs <- lapply(dfs, function(df) df(x, df[1], df[2]))
# 데이터프레임 생성
df <- data.frame(x, do.call(cbind, pdfs))
# 그래프 그리기
ggplot(df, aes(x=x)) +
geom_line(aes(y=`c(10,10)`, color='10-10')) +
geom_line(aes(y=`c(10,30)`, color='10-30')) +
...
# 그래프 그리기
ggplot(df, aes(x=x)) +
geom_line(aes(y=`c(10,10)`, color='10-10')) +
geom_line(aes(y=`c(10,30)`, color='10-30')) +
labs(title="F distribution for various degrees of freedom",
x="Value",
y="Density",
color="Degrees of Freedom") +
theme_bw()
qf(0.025, df1 = 5, df2 = 30)
qf(0.975, dfr = 5, df2 = 30)
qf(0.975, df1 = 5, df2 = 30)
