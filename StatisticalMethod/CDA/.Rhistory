dist_after
knitr::opts_chunk$set(echo = TRUE)
rsd <- rstandard(dist_fit)
fit <- fitted.values(dist_fit)
dist_after <- cbind(dist, rsd, fit)
m_residuals(dist_after)
dist %>%
ggplot(aes(x = case, y = time)) +
geom_point(color = sbl) +
stat_smooth(method = "lm",
formula = y~x,
se = FALSE,
color = lre
) +
theme_bw()
new_case <- data.frmae(case = c(20, 30))
predict(dist_fit, newdata = new_case,
interval = c("confidence"), level = 0.95)
new_case <- data.frmae(case = c(20, 30))
data.frmae(case = c(20, 30))
data.frmae(case = c(20, 30))
```{r}
new_case <- data.frame(case = c(20, 30))
predict(dist_fit, newdata = new_case,
interval = c("confidence"), level = 0.95)
new_case <- data.frame(case = c(20, 30))
predict(dist_fit, newdata = new_case,
interval = c("prediction"), level = 0.95)
new_case <- data.frame(case = c(20, 30))
predict(dist_fit, newdata = new_case,
interval = c("prediction"), level = 0.95)
# 데이터 생성
case_grid <- seq(min(dist$case), max(dist$case), by = 0.01)
# 신뢰구간(confidence bands) 예측
dist_c_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "confidence", level = 0.95)
# 예측구간(prediction bands) 예측
dist_p_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "prediction", level = 0.95)
# 신뢰구간(confidence bands) 예측
dist_c_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "confidence", level = 0.95)
# 예측구간(prediction bands) 예측
dist_p_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "prediction", level = 0.95)
# 그래프 그리기
ggplot(aes(x = case, y = time)) +
geom_point(color = sbl) +
geom_smooth(method = lm, se = TRUE) + # se=TRUE를 선택하여 신뢰 구간을 표시할 수 있다.
geom_point(aes(x = mean(case), y = mean(time)),
color = lgo,
size = 3) +
geom_line(data = dist_c_band,
aes(x = case_grid, y = lwr),
color = lre, linetype = "dashed") +
geom_line(data = dist_c_band,
aes(x = case_grid, y = upr),
color = lre, linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = lwr),
color = "darkgray", linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = upr),
color = "darkgray", linetype = "dashed") +
labs(title = "추정된 회귀선과 신뢰대/예측대",
subtitle = paste("meantime =", round(dist_fit$coefficients[1], 2),
"+", round(dist_fit$coefficients[2], 2), "case",
", R^2 =", round(summary(dist_fit)$r.squared, 2))) +
theme_economist() +
scale_color_economist()
# ggfortify 패키지 설치 및 불러오기
# install.packages("ggfortify")
library(ggfortify)
knitr::opts_chunk$set(echo = TRUE)
# ggfortify 패키지 설치 및 불러오기
install.packages("ggfortify")
# ggfortify 패키지 설치 및 불러오기
# install.packages("ggfortify")
library(ggfortify)
# 데이터 생성
case_grid <- seq(min(dist$case), max(dist$case), by = 0.01)
# 신뢰구간(confidence bands) 예측
dist_c_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "confidence", level = 0.95)
# 예측구간(prediction bands) 예측
dist_p_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "prediction", level = 0.95)
# 그래프 그리기
ggplot(aes(x = case, y = time)) +
geom_point(color = sbl) +
geom_smooth(method = lm, se = TRUE) + # se=TRUE를 선택하여 신뢰 구간을 표시할 수 있다.
geom_point(aes(x = mean(case), y = mean(time)),
color = lgo,
size = 3) +
geom_line(data = dist_c_band,
aes(x = case_grid, y = lwr),
color = lre, linetype = "dashed") +
geom_line(data = dist_c_band,
aes(x = case_grid, y = upr),
color = lre, linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = lwr),
color = "darkgray", linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = upr),
color = "darkgray", linetype = "dashed") +
labs(title = "추정된 회귀선과 신뢰대/예측대",
subtitle = paste("meantime =", round(dist_fit$coefficients[1], 2),
"+", round(dist_fit$coefficients[2], 2), "case",
", R^2 =", round(summary(dist_fit)$r.squared, 2))) +
theme_economist() +
scale_color_economist()
---
# ggfortify 패키지 설치 및 불러오기
# install.packages("ggfortify")
library(ggfortify)
# 데이터 생성
case_grid <- seq(min(dist$case), max(dist$case), by = 0.01)
# 신뢰구간(confidence bands) 예측
dist_c_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "confidence", level = 0.95)
# 예측구간(prediction bands) 예측
dist_p_band <- predict(dist_fit,
newdata = data.frame(case = case_grid),
interval = "prediction", level = 0.95)
# 그래프 그리기
ggplot(dist_fit, aes(x = case, y = time)) +
geom_point(color = sbl) +
geom_smooth(method = lm, se = TRUE) + # se=TRUE를 선택하여 신뢰 구간을 표시할 수 있다.
geom_point(aes(x = mean(case), y = mean(time)),
color = lgo,
size = 3) +
geom_line(data = dist_c_band,
aes(x = case_grid, y = lwr),
color = lre, linetype = "dashed") +
geom_line(data = dist_c_band,
aes(x = case_grid, y = upr),
color = lre, linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = lwr),
color = "darkgray", linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = upr),
color = "darkgray", linetype = "dashed") +
labs(title = "추정된 회귀선과 신뢰대/예측대",
subtitle = paste("meantime =", round(dist_fit$coefficients[1], 2),
"+", round(dist_fit$coefficients[2], 2), "case",
", R^2 =", round(summary(dist_fit)$r.squared, 2))) +
theme_economist() +
scale_color_economist()
# 그래프 그리기
ggplot(dist_fit, aes(x = case, y = time)) +
geom_point(color = sbl) +
geom_smooth(method = lm, se = TRUE) + # se=TRUE를 선택하여 신뢰 구간을 표시할 수 있다.
geom_point(aes(x = mean(case), y = mean(time)),
color = lgo,
size = 3) +
geom_line(data = dist_c_band,
aes(x = case_grid, y = lwr),
color = lre, linetype = "dashed") +
geom_line(data = dist_c_band,
aes(x = case_grid, y = upr),
color = lre, linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = lwr),
color = "darkgray", linetype = "dashed") +
geom_line(data = dist_p_band,
aes(x = case_grid, y = upr),
color = "darkgray", linetype = "dashed") +
labs(title = "추정된 회귀선과 신뢰대/예측대",
subtitle = paste("meantime =", round(dist_fit$coefficients[1], 2),
"+", round(dist_fit$coefficients[2], 2), "case",
", R^2 =", round(summary(dist_fit)$r.squared, 2))) +
theme_economist() +
scale_color_economist()
---
# 데이터 생성
case_grid <- seq(min(dist$case), max(dist$case), by = 0.01)
library(ggthemes)
swtest <- read.csv(paste0(data_path, "test.sw.csv"))
swtest
swtest <- data.pre(swtest)
diag_residuals(data = swtest, swtest$kloc, swtest$ttcase)
m_residuals(data = swtest, swtest$kloc, swtest$ttcase)
m_residuals(data = swtest)
m_residuals(swtest)
rsd <- rstandard(swtest)
fit <- fitted.values(swtest)
swtest_after <- cbind(swtest, rsd, fit)
lm(swtest)
swtest <- lm(swtest)
rsd <- rstandard(swtest)
fit <- fitted.values(swtest)
swtest_after <- cbind(swtest, rsd, fit)
m_residuals(swtest_after)
swtest
swtest_after
swtest <- read.csv(paste0(data_path, "test.sw.csv"))
swtest <- data.pre(swtest)
swtest
diag_residuals
diag_residuals()
swtest_fit <- lm(ttcase ~ KLOC, data = dist)
swtest_fit <- lm(ttcase ~ KLOC, data = swtest)
swtest_fit <- lm(ttcase ~ kloc, data = swtest)
rsd <- rstandard(swtest_fit)
fit <- fitted.values(swtest_fit)
swtest_fit <- cbind(swtest_fit, rsd, fit)
m_residuals(swtest_fit)
swtest_fit <- lm(ttcase ~ kloc, data = swtest)
rsd <- rstandard(swtest_fit)
fit <- fitted.values(swtest_fit)
swtest_after <- cbind(swtest_fit, rsd, fit)
swtest_after
m_residuals(swtest_after)
swtest_fit <- lm(ttcase ~ kloc, data = swtest)
rsd <- rstandard(swtest_fit)
fit <- fitted.values(swtest_fit)
swtest_after <- cbind(swtest, rsd, fit)
m_residuals(swtest_after)
simple_reg(data = swtest, swtest$kloc, swtest$ttcase)
cem <- read.csv(paste0(data_path,"cem.materials.csv"))
str(cem)
cem <- cem %>%
dplyr::rename_all(tolower) %>%
select(-id) %>%
relocate(y)
cem <- cem %>%
dplyr::rename_all(tolower) %>%
select(-id) %>%
relocate(y)
cem <- cem %>%
dplyr::rename_all(tolower) %>%
select(-id) %>%
relocate(y)
cem <- read.csv(paste0(data_path,"cem.materials.csv"))
str(cem)
cem <- cem %>%
dplyr::rename_all(tolower) %>%
select(-id) %>%
relocate(y)
na_count(cem)
cem %>%
ggpairs(columns = 1:ncol(.),
lower = list(continuous = wrap("points", # continuous = "smooth"
color = sbl,
aplha = 0.5)
),
upper = list(continuous = wrap("points", # wrap("cor", size = 2.5)
color = sbl,
alpha =0.5)
),
diag = list(continuous = wrap("densityDiag",
color = "black",
alpha = 0.5)
),
title = "Component Data") +
theme_bw()
gg_mplot <- function(df, ttl){
df %>%
ggpairs(columns = 1:ncol(.),
lower = list(continuous = wrap("points", #continuous = "smooth"
color = sbl,
alpha = 0.5)
),
upper = list(continuous = wrap("points", #wrap("cor", size = 2.5)
color = sbl,
alpha = 0.5)
),
diag = list(continuous = wrap("densityDiag",
color = "black",
alpha = 0.5)
),
title = ttl) +
theme_bw()
}
ttl = "Component Data: function 활용"
gg_mplot(cem, ttl)
fml <- "y ~ t1 + t2 + t3 + t4"
cem_model <- lm(fml, cem)
summary(cem_model)
confint(cem_model, level = 0.95)
cem_model$coefficients
summary(cem_model)$sigma
confint(cem_model, level = 0.95)
confint(cem_model, c("t1", "t2"), level = 0.95)
x0 <- data.frame(t1 = 11, t2 =56, t3 = 9, t4 = 20)
#점추정
predict(cem_model, newdata = x0)
#구간 추정: 신뢰 구간
predict(cem_model, newdata = x0, interval = "confidence", level = 0.05)
#구간 추정: 신뢰 구간
predict(cem_model, newdata = x0, interval = "confidence", level = 0.95)
#구간 추정: 예측 구간
predict(cem_model, newdata = x0, interval = "prediction", level = 0.95)
# fml <- "y ~ t1 + t2 + t3+ t4"
model_start <- lm(y ~ 1, data = cem)
model_start
cem_fore_aic <- step(model_start, scope = fml, diretion = "forward")
extract(cem_fore_aic)
extractAIC(cem_fore_aic)
coef(cem_fore_aic)
summary(cem_fore_aic)$adj.r.squared
cem_fore_bic <- step(model_start, scope = fml, direction = "forward",
k = log(length(cem)),
trace = 0)
coef(cem_fore_bic)
summary(cem_fore_bic)$adj.r.squared
formula(cem_fore_bic)
cem_back_aic <- step(cem_model, direction = "backward", trace = 0)
extractAIC(cem_back_aic)
coef(cem_back_aic)
coef(cem_back_aic)
n <- length(resid(cem_model))
n
cem_back_bic <- step(cem_model, direction = "backward",
k = log(n),
trace = 0)
coef(cem_back_bic)
formula(cem_back_aic)
formula(cem_back_bic)
cem_both_aic <- step(model_start, scope = fml, diretion = "both", trace = 0)
cem_both_bic <- step(model_start, scope = fml, diretion = "both",
k = long(n),
trace = 0)
cem_both_aic <- step(model_start, scope = fml, diretion = "both", trace = 0)
cem_both_bic <- step(model_start, scope = fml, diretion = "both",
k = log(n),
trace = 0)
formula(cem_both_aic)
final.model_aic <- rbind("forward" = as.character(formula(cem_fore_aic))[3])
final.model_aic <- rbind("forward" = as.character(formula(cem_fore_aic))[3],
"backward" = as.character(formula(cem_back_aic))[3],
"stepwise" = as.character(formula(cem_both_aic))[3]
)
final.model_bic <- rbind("forward" = as.character(formula(cem_fore_bic))[3],
"backward" = as.character(formula(cem_back_bic))[3],
"stepwise" = as.character(formula(cem_both_bic))[3]
)
info <- cbind(final.model_aic, final.model_bic)
colnames(info) <- c("AIC", "BIC")
info
info
summary(cem_back_aic)
```{r}
summary(cem_back_bic)
formula(cem_fore_aic)
cem_both_bic
summary(cem_back_bic)
extractAIC(cem_fore_aic)
extractAIC(cem_back_aic)
extractAIC(cem_both_aic)
extractAIC(cem_fore_aic)
extractAIC(cem_back_aic)
extractAIC(cem_both_aic)
summary(cem_both_aic)
extractBIC(cem_both_bic)
extractAIC(cem_both_bic)
extractAIC(cem_fore_bic)
extractAIC(cem_back_bic)
extractAIC(cem_both_bic)
extractAIC(cem_fore_bic)
extractAIC(cem_back_bic)
extractAIC(cem_both_bic)
extractAIC(cem_fore_bic)
extractAIC(cem_back_bic)
extractAIC(cem_both_bic)
extractAIC(cem_fore_bic)
temp <- leaps(x = cem[, -1], y = cem[ , 1])
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
cem_all <- regsubsets(full, data = cem, nvmax = 4)
summary(cem_all)
temp <- leaps(x = cem[, -1], y = cem[ , 1])
library(leaps)
temp <- leaps(x = cem[, -1], y = cem[ , 1])
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
cem_all <- regsubsets(full, data = cem, nvmax = 4)
summary(cem_all)
model.q <- summary(cem_all)
model.q
# 수정 결정계수가 가장 큰 모형
(adj.r2 <- which.max(model.q$adjr2))
# Cp가 가장 작은 모형
(cp <- which.min(model.q$cp))
# BIC가 가장 작은 모형
(bic <- which.min(model.q$bic))
library(memisc)
install.packages("memisc")
install.packages("memisc")
library(memisc)
model_1 <- lm(formula = y ~ t1, data = cem)
model_2 <- lm(formula = y ~ t1 + t2, data = cem)
model_3 <- lm(formula = y ~ t1 + t2 + t3, data = cem)
model_4 <- lm(formula = y ~ t1 + t2 + t3 + t4, data = cem)
s_table <- mtalbe("M1" = model_1, "M2" = model_2, "M3" = model_3, "M4" = model_4,
summary.stats = c("sigma", "R-squared", "F", "P"))
s_table
s_table <- mtalbe("M1" = model_1, "M2" = model_2, "M3" = model_3, "M4" = model_4,
summary.stats = c("sigma", "R-squared", "F", "P"))
s_table <- mtable("M1" = model_1, "M2" = model_2, "M3" = model_3, "M4" = model_4,
summary.stats = c("sigma", "R-squared", "F", "P"))
s_table
library(olsrr)
install.packages("olsrr")
install.packages("olsrr")
library(olsrr)
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1], collapse = "+"))
))
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1], collapse = "+"))
))
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
full
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(1, 5:6)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
f_model
t_model <- lm(formula(temp), data = cem)
t_model
ols_mallows_cp(t_model, f_model) # 반드시 full_model 가정
t_model
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
full
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(1,2)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
t_model
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
full
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(1,2)]), collapse = "+"))
)
temp
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(4:)]), collapse = "+"))
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(4:6)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
ols_mallows_cp(t_model, f_model) # 반드시 full_model 지정
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
full <- as.formula(paste("y ~ ",
paste(colnames(cem[-1]), collapse = "+"))
)
full
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(4:6)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(-1, 4:6)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
temp <- as.formula(paste("y ~ ",
paste(colnames(cem[-c(1, 4:6)]), collapse = "+"))
)
temp
f_model <- lm(formula(full), data = cem)
t_model <- lm(formula(temp), data = cem)
ols_mallows_cp(t_model, f_model) # 반드시 full_model 지정
ad.test(swtest_after$rsd)
ad.test(swtest_after$rsd)
pearson.test(swtest_after$rsd)
ks.test(swtest_after$rsd)
ks.test(swtest_after$rsd, "pnorm")
simple_reg(cargo, x, y)
knitr::opts_chunk$set(echo = TRUE)
simple_reg(data = swtest, swtest$kloc, swtest$ttcase)
simple_reg(cargo, x, y)
ad.test(defect$times)
pearson.test(defect$times)
ks.test(defect$times, "pnorm")
defect$trans0.2
ad.test(defect$trans0.2)
ad.test(defect$trans0.2)
pearson.test(defect$trans0.2)
ks.test(defect$trans0.2m "pnorm")
ks.test(defect$trans0.2m "pnorm")
ks.test(defect$trans0.2m, "pnorm")
ks.test(defect$trans0.2m, "pnorm")
ad.test(defect$trans0.2)
pearson.test(defect$trans0.2)
